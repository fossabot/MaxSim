// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaxSimInterface.proto

#ifndef PROTOBUF_MaxSimInterface_2eproto__INCLUDED
#define PROTOBUF_MaxSimInterface_2eproto__INCLUDED
#ifdef __cplusplus

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MaxSimInterface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MaxSimInterface_2eproto();
void protobuf_AssignDesc_MaxSimInterface_2eproto();
void protobuf_ShutdownFile_MaxSimInterface_2eproto();

class MaxSimConfig;
class FieldOffsetRemapPair;
class DataTransInfo;
class DataTransDB;
class OffsetBCIPair;
class MethodInfo;
class FieldInfo;
class ClassInfo;
class MaxineInfoDB;
class AllocProf;
class CacheMissProf;
class CacheRWGroupInfo;
class CacheRWGroupMissProf;
class AllocSiteProf;
class FieldProf;
class ClassProf;
class ZSimProfDB;

#endif  // __cplusplus
enum MethodInfo_Kind {
  MethodInfo_Kind_OPTIMIZED = 0,
  MethodInfo_Kind_BOOT = 1,
  MethodInfo_Kind_BASELINE = 2,
  MethodInfo_Kind_NATIVE = 3
};
#ifdef __cplusplus
bool MethodInfo_Kind_IsValid(int value);
const MethodInfo_Kind MethodInfo_Kind_Kind_MIN = MethodInfo_Kind_OPTIMIZED;
const MethodInfo_Kind MethodInfo_Kind_Kind_MAX = MethodInfo_Kind_NATIVE;
const int MethodInfo_Kind_Kind_ARRAYSIZE = MethodInfo_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* MethodInfo_Kind_descriptor();
inline const ::std::string& MethodInfo_Kind_Name(MethodInfo_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    MethodInfo_Kind_descriptor(), value);
}
inline bool MethodInfo_Kind_Parse(
    const ::std::string& name, MethodInfo_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MethodInfo_Kind>(
    MethodInfo_Kind_descriptor(), name, value);
}
#endif  // __cplusplus
enum FieldInfo_Property {
  FieldInfo_Property_FINAL = 0
};
#ifdef __cplusplus
bool FieldInfo_Property_IsValid(int value);
const FieldInfo_Property FieldInfo_Property_Property_MIN = FieldInfo_Property_FINAL;
const FieldInfo_Property FieldInfo_Property_Property_MAX = FieldInfo_Property_FINAL;
const int FieldInfo_Property_Property_ARRAYSIZE = FieldInfo_Property_Property_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldInfo_Property_descriptor();
inline const ::std::string& FieldInfo_Property_Name(FieldInfo_Property value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldInfo_Property_descriptor(), value);
}
inline bool FieldInfo_Property_Parse(
    const ::std::string& name, FieldInfo_Property* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldInfo_Property>(
    FieldInfo_Property_descriptor(), name, value);
}
#endif  // __cplusplus
enum ClassInfo_Kind {
  ClassInfo_Kind_TUPLE = 0,
  ClassInfo_Kind_ARRAY = 1,
  ClassInfo_Kind_PRIMITIVE = 2,
  ClassInfo_Kind_HYBRID = 3,
  ClassInfo_Kind_OTHER = 4
};
#ifdef __cplusplus
bool ClassInfo_Kind_IsValid(int value);
const ClassInfo_Kind ClassInfo_Kind_Kind_MIN = ClassInfo_Kind_TUPLE;
const ClassInfo_Kind ClassInfo_Kind_Kind_MAX = ClassInfo_Kind_OTHER;
const int ClassInfo_Kind_Kind_ARRAYSIZE = ClassInfo_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClassInfo_Kind_descriptor();
inline const ::std::string& ClassInfo_Kind_Name(ClassInfo_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClassInfo_Kind_descriptor(), value);
}
inline bool ClassInfo_Kind_Parse(
    const ::std::string& name, ClassInfo_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClassInfo_Kind>(
    ClassInfo_Kind_descriptor(), name, value);
}
#endif  // __cplusplus
enum PointerTaggingType {
  NO_TAGGING = 0,
  CLASS_ID_TAGGING = 1,
  ALLOC_SITE_ID_TAGGING = 2,
  UNDEFINED_TAGGING = 3
};
#ifdef __cplusplus
bool PointerTaggingType_IsValid(int value);
const PointerTaggingType PointerTaggingType_MIN = NO_TAGGING;
const PointerTaggingType PointerTaggingType_MAX = UNDEFINED_TAGGING;
const int PointerTaggingType_ARRAYSIZE = PointerTaggingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointerTaggingType_descriptor();
inline const ::std::string& PointerTaggingType_Name(PointerTaggingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointerTaggingType_descriptor(), value);
}
inline bool PointerTaggingType_Parse(
    const ::std::string& name, PointerTaggingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointerTaggingType>(
    PointerTaggingType_descriptor(), name, value);
}
#endif  // __cplusplus
enum ZSimMagicOpcodes {
  ZSIM_M_OPC_LO = 1025,
  ZSIM_M_OPC_ROI_BEGIN = 1025,
  ZSIM_M_OPC_ROI_END = 1026,
  ZSIM_M_OPC_ZSIM_HI = 1033
};
#ifdef __cplusplus
bool ZSimMagicOpcodes_IsValid(int value);
const ZSimMagicOpcodes ZSimMagicOpcodes_MIN = ZSIM_M_OPC_LO;
const ZSimMagicOpcodes ZSimMagicOpcodes_MAX = ZSIM_M_OPC_ZSIM_HI;
const int ZSimMagicOpcodes_ARRAYSIZE = ZSimMagicOpcodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZSimMagicOpcodes_descriptor();
inline const ::std::string& ZSimMagicOpcodes_Name(ZSimMagicOpcodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZSimMagicOpcodes_descriptor(), value);
}
inline bool ZSimMagicOpcodes_Parse(
    const ::std::string& name, ZSimMagicOpcodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZSimMagicOpcodes>(
    ZSimMagicOpcodes_descriptor(), name, value);
}
#endif  // __cplusplus
enum MaxSimMagicOpcodes {
  MAXSIM_M_OPC_LO = 1101,
  MAXSIM_M_OPC_GET_AVAILABLE_PROCESSORS_NUM = 1101,
  MAXSIM_M_OPC_REPORT_HUB_OFFSET = 1102,
  MAXSIM_M_OPC_REPORT_HUB_TYPE_OFFSET = 1103,
  MAXSIM_M_OPC_REPORT_ARRAY_FIRST_ELEM_OFFSET = 1104,
  MAXSIM_M_OPC_REGISTER_ADDRESS_RANGE = 1105,
  MAXSIM_M_OPC_DEREGISTER_ADDRESS_RANGE = 1106,
  MAXSIM_M_OPC_GET_ALLOCATION_SITE_ESTIMATION_ID = 1107,
  MAXSIM_M_OPC_PROFILE_OBJECT_ALLOCATION = 1108,
  MAXSIM_M_OPC_ENABLE_PROFILE_COLLECTION = 1109,
  MAXSIM_M_OPC_DISABLE_PROFILE_COLLECTION = 1110,
  MAXSIM_M_OPC_RESET_PROFILE_COLLECTION = 1111,
  MAXSIM_M_OPC_PRINT_PROFILE_TO_FILE = 1112,
  MAXSIM_M_OPC_DUMP_EVENTUAL_STATS = 1113,
  MAXSIM_M_OPC_FILTER_LOOP_BEGIN = 1114,
  MAXSIM_M_OPC_FILTER_LOOP_END = 1115,
  MAXSIM_M_OPC_ACTIVATE_DATA_TRANS_VIA_ADDR_SPACE_MORPH = 1116,
  MAXSIM_M_OPC_HI = 1200
};
#ifdef __cplusplus
bool MaxSimMagicOpcodes_IsValid(int value);
const MaxSimMagicOpcodes MaxSimMagicOpcodes_MIN = MAXSIM_M_OPC_LO;
const MaxSimMagicOpcodes MaxSimMagicOpcodes_MAX = MAXSIM_M_OPC_HI;
const int MaxSimMagicOpcodes_ARRAYSIZE = MaxSimMagicOpcodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaxSimMagicOpcodes_descriptor();
inline const ::std::string& MaxSimMagicOpcodes_Name(MaxSimMagicOpcodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaxSimMagicOpcodes_descriptor(), value);
}
inline bool MaxSimMagicOpcodes_Parse(
    const ::std::string& name, MaxSimMagicOpcodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaxSimMagicOpcodes>(
    MaxSimMagicOpcodes_descriptor(), name, value);
}
#endif  // __cplusplus
enum MaxSimMagicOpPackedArgsOffsets {
  MAXSIM_M_OP_PROFILE_OBJECT_ALLOCATION_P_ARG_SIZE_OFF = 0,
  MAXSIM_M_OP_PROFILE_OBJECT_ALLOCATION_P_ARG_TAG_TYPE_OFF = 32,
  MAXSIM_M_OP_PROFILE_OBJECT_ALLOCATION_P_ARG_TAG_OFF = 48
};
#ifdef __cplusplus
bool MaxSimMagicOpPackedArgsOffsets_IsValid(int value);
const MaxSimMagicOpPackedArgsOffsets MaxSimMagicOpPackedArgsOffsets_MIN = MAXSIM_M_OP_PROFILE_OBJECT_ALLOCATION_P_ARG_SIZE_OFF;
const MaxSimMagicOpPackedArgsOffsets MaxSimMagicOpPackedArgsOffsets_MAX = MAXSIM_M_OP_PROFILE_OBJECT_ALLOCATION_P_ARG_TAG_OFF;
const int MaxSimMagicOpPackedArgsOffsets_ARRAYSIZE = MaxSimMagicOpPackedArgsOffsets_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaxSimMagicOpPackedArgsOffsets_descriptor();
inline const ::std::string& MaxSimMagicOpPackedArgsOffsets_Name(MaxSimMagicOpPackedArgsOffsets value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaxSimMagicOpPackedArgsOffsets_descriptor(), value);
}
inline bool MaxSimMagicOpPackedArgsOffsets_Parse(
    const ::std::string& name, MaxSimMagicOpPackedArgsOffsets* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaxSimMagicOpPackedArgsOffsets>(
    MaxSimMagicOpPackedArgsOffsets_descriptor(), name, value);
}
#endif  // __cplusplus
enum AddressRangeType {
  STACK_ADDRESS_RANGE = 0,
  TLS_ADDRESS_RANGE = 1,
  HEAP_ADDRESS_RANGE = 2,
  CODE_ADDRESS_RANGE = 3,
  NATIVE_ADDRESS_RANGE = 4,
  ARRAY_CRITICAL_ADDRESS_RANGE = 5,
  ALLOCATION_FRONTIER_ADDRESS_RANGE = 6,
  PROTOBUF_MESSAGE_ADDRESS_RANGE = 7,
  UNDEFINED_ADDRESS_RANGE = 8
};
#ifdef __cplusplus
bool AddressRangeType_IsValid(int value);
const AddressRangeType AddressRangeType_MIN = STACK_ADDRESS_RANGE;
const AddressRangeType AddressRangeType_MAX = UNDEFINED_ADDRESS_RANGE;
const int AddressRangeType_ARRAYSIZE = AddressRangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddressRangeType_descriptor();
inline const ::std::string& AddressRangeType_Name(AddressRangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddressRangeType_descriptor(), value);
}
inline bool AddressRangeType_Parse(
    const ::std::string& name, AddressRangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddressRangeType>(
    AddressRangeType_descriptor(), name, value);
}
#endif  // __cplusplus
enum MaxineVMOperationMode {
  MAXINE_VM_OPERATION_MODE_UNKNOWN = 0,
  MAXINE_VM_OPERATION_MODE_RUNNING_NON_GC = 1,
  MAXINE_VM_OPERATION_MODE_RUNNING_GC = 2,
  MAXINE_VM_OPERATION_MODE_SAME = 3
};
#ifdef __cplusplus
bool MaxineVMOperationMode_IsValid(int value);
const MaxineVMOperationMode MaxineVMOperationMode_MIN = MAXINE_VM_OPERATION_MODE_UNKNOWN;
const MaxineVMOperationMode MaxineVMOperationMode_MAX = MAXINE_VM_OPERATION_MODE_SAME;
const int MaxineVMOperationMode_ARRAYSIZE = MaxineVMOperationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaxineVMOperationMode_descriptor();
inline const ::std::string& MaxineVMOperationMode_Name(MaxineVMOperationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaxineVMOperationMode_descriptor(), value);
}
inline bool MaxineVMOperationMode_Parse(
    const ::std::string& name, MaxineVMOperationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaxineVMOperationMode>(
    MaxineVMOperationMode_descriptor(), name, value);
}
#endif  // __cplusplus
enum HubType {
  HUB_TYPE_TUPLE = 0,
  HUB_TYPE_ARRAY_OF_REFERENCES = 1,
  HUB_TYPE_ARRAY_OF_PRIMITIVES = 2,
  HUB_TYPE_UNDEF = 3
};
#ifdef __cplusplus
bool HubType_IsValid(int value);
const HubType HubType_MIN = HUB_TYPE_TUPLE;
const HubType HubType_MAX = HUB_TYPE_UNDEF;
const int HubType_ARRAYSIZE = HubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HubType_descriptor();
inline const ::std::string& HubType_Name(HubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HubType_descriptor(), value);
}
inline bool HubType_Parse(
    const ::std::string& name, HubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HubType>(
    HubType_descriptor(), name, value);
}
#endif  // __cplusplus
enum PointerTag {
  TAG_AGGREGATE_LO = -1,
  TAG_UNDEFINED = -1,
  TAG_FETCHES = 0,
  TAG_CODE = 1,
  TAG_HEAP = 2,
  TAG_STACK = 3,
  TAG_TLS = 4,
  TAG_NATIVE = 5,
  TAG_STATIC = 6,
  TAG_UNDEFINED_GP = 7,
  TAG_AGGREGATE_HI = 7,
  TAG_RESERVED_LO = 8,
  TAG_RESERVED_HI = 10,
  TAG_TRANSFORMATION_LO = 11,
  TAG_TRANSFORMATION_HI = 15,
  TAG_GP_LO = 16,
  TAG_GP_HI = 65534,
  DEFINED_TAGS_NUM = 65535
};
#ifdef __cplusplus
bool PointerTag_IsValid(int value);
const PointerTag PointerTag_MIN = TAG_AGGREGATE_LO;
const PointerTag PointerTag_MAX = DEFINED_TAGS_NUM;
const int PointerTag_ARRAYSIZE = PointerTag_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointerTag_descriptor();
inline const ::std::string& PointerTag_Name(PointerTag value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointerTag_descriptor(), value);
}
inline bool PointerTag_Parse(
    const ::std::string& name, PointerTag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointerTag>(
    PointerTag_descriptor(), name, value);
}
// ===================================================================

class MaxSimConfig : public ::google::protobuf::Message {
 public:
  MaxSimConfig();
  virtual ~MaxSimConfig();

  MaxSimConfig(const MaxSimConfig& from);

  inline MaxSimConfig& operator=(const MaxSimConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxSimConfig& default_instance();

  void Swap(MaxSimConfig* other);

  // implements Message ----------------------------------------------

  MaxSimConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxSimConfig& from);
  void MergeFrom(const MaxSimConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isMaxSimEnabled = 1 [default = true];
  inline bool has_ismaxsimenabled() const;
  inline void clear_ismaxsimenabled();
  static const int kIsMaxSimEnabledFieldNumber = 1;
  inline bool ismaxsimenabled() const;
  inline void set_ismaxsimenabled(bool value);

  // optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
  inline bool has_pointertaggingtype() const;
  inline void clear_pointertaggingtype();
  static const int kPointerTaggingTypeFieldNumber = 2;
  inline ::MaxSimInterface::PointerTaggingType pointertaggingtype() const;
  inline void set_pointertaggingtype(::MaxSimInterface::PointerTaggingType value);

  // optional int32 layoutScaleFactor = 3 [default = 1];
  inline bool has_layoutscalefactor() const;
  inline void clear_layoutscalefactor();
  static const int kLayoutScaleFactorFieldNumber = 3;
  inline ::google::protobuf::int32 layoutscalefactor() const;
  inline void set_layoutscalefactor(::google::protobuf::int32 value);

  // optional int32 layoutScaleRefFactor = 4 [default = 1];
  inline bool has_layoutscalereffactor() const;
  inline void clear_layoutscalereffactor();
  static const int kLayoutScaleRefFactorFieldNumber = 4;
  inline ::google::protobuf::int32 layoutscalereffactor() const;
  inline void set_layoutscalereffactor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.MaxSimConfig)
 private:
  inline void set_has_ismaxsimenabled();
  inline void clear_has_ismaxsimenabled();
  inline void set_has_pointertaggingtype();
  inline void clear_has_pointertaggingtype();
  inline void set_has_layoutscalefactor();
  inline void clear_has_layoutscalefactor();
  inline void set_has_layoutscalereffactor();
  inline void clear_has_layoutscalereffactor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ismaxsimenabled_;
  int pointertaggingtype_;
  ::google::protobuf::int32 layoutscalefactor_;
  ::google::protobuf::int32 layoutscalereffactor_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static MaxSimConfig* default_instance_;
};
// -------------------------------------------------------------------

class FieldOffsetRemapPair : public ::google::protobuf::Message {
 public:
  FieldOffsetRemapPair();
  virtual ~FieldOffsetRemapPair();

  FieldOffsetRemapPair(const FieldOffsetRemapPair& from);

  inline FieldOffsetRemapPair& operator=(const FieldOffsetRemapPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldOffsetRemapPair& default_instance();

  void Swap(FieldOffsetRemapPair* other);

  // implements Message ----------------------------------------------

  FieldOffsetRemapPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldOffsetRemapPair& from);
  void MergeFrom(const FieldOffsetRemapPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromOffset = 1;
  inline bool has_fromoffset() const;
  inline void clear_fromoffset();
  static const int kFromOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 fromoffset() const;
  inline void set_fromoffset(::google::protobuf::int32 value);

  // required int32 toOffset = 2;
  inline bool has_tooffset() const;
  inline void clear_tooffset();
  static const int kToOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 tooffset() const;
  inline void set_tooffset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.FieldOffsetRemapPair)
 private:
  inline void set_has_fromoffset();
  inline void clear_has_fromoffset();
  inline void set_has_tooffset();
  inline void clear_has_tooffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromoffset_;
  ::google::protobuf::int32 tooffset_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static FieldOffsetRemapPair* default_instance_;
};
// -------------------------------------------------------------------

class DataTransInfo : public ::google::protobuf::Message {
 public:
  DataTransInfo();
  virtual ~DataTransInfo();

  DataTransInfo(const DataTransInfo& from);

  inline DataTransInfo& operator=(const DataTransInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTransInfo& default_instance();

  void Swap(DataTransInfo* other);

  // implements Message ----------------------------------------------

  DataTransInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataTransInfo& from);
  void MergeFrom(const DataTransInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string typeDesc = 1;
  inline bool has_typedesc() const;
  inline void clear_typedesc();
  static const int kTypeDescFieldNumber = 1;
  inline const ::std::string& typedesc() const;
  inline void set_typedesc(const ::std::string& value);
  inline void set_typedesc(const char* value);
  inline void set_typedesc(const char* value, size_t size);
  inline ::std::string* mutable_typedesc();
  inline ::std::string* release_typedesc();
  inline void set_allocated_typedesc(::std::string* typedesc);

  // optional int32 transTag = 2;
  inline bool has_transtag() const;
  inline void clear_transtag();
  static const int kTransTagFieldNumber = 2;
  inline ::google::protobuf::int32 transtag() const;
  inline void set_transtag(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
  inline int fieldoffsetremappairs_size() const;
  inline void clear_fieldoffsetremappairs();
  static const int kFieldOffsetRemapPairsFieldNumber = 3;
  inline const ::MaxSimInterface::FieldOffsetRemapPair& fieldoffsetremappairs(int index) const;
  inline ::MaxSimInterface::FieldOffsetRemapPair* mutable_fieldoffsetremappairs(int index);
  inline ::MaxSimInterface::FieldOffsetRemapPair* add_fieldoffsetremappairs();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldOffsetRemapPair >&
      fieldoffsetremappairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldOffsetRemapPair >*
      mutable_fieldoffsetremappairs();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.DataTransInfo)
 private:
  inline void set_has_typedesc();
  inline void clear_has_typedesc();
  inline void set_has_transtag();
  inline void clear_has_transtag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* typedesc_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldOffsetRemapPair > fieldoffsetremappairs_;
  ::google::protobuf::int32 transtag_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static DataTransInfo* default_instance_;
};
// -------------------------------------------------------------------

class DataTransDB : public ::google::protobuf::Message {
 public:
  DataTransDB();
  virtual ~DataTransDB();

  DataTransDB(const DataTransDB& from);

  inline DataTransDB& operator=(const DataTransDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTransDB& default_instance();

  void Swap(DataTransDB* other);

  // implements Message ----------------------------------------------

  DataTransDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataTransDB& from);
  void MergeFrom(const DataTransDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
  inline int datatransinfo_size() const;
  inline void clear_datatransinfo();
  static const int kDataTransInfoFieldNumber = 1;
  inline const ::MaxSimInterface::DataTransInfo& datatransinfo(int index) const;
  inline ::MaxSimInterface::DataTransInfo* mutable_datatransinfo(int index);
  inline ::MaxSimInterface::DataTransInfo* add_datatransinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >&
      datatransinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >*
      mutable_datatransinfo();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.DataTransDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo > datatransinfo_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static DataTransDB* default_instance_;
};
// -------------------------------------------------------------------

class OffsetBCIPair : public ::google::protobuf::Message {
 public:
  OffsetBCIPair();
  virtual ~OffsetBCIPair();

  OffsetBCIPair(const OffsetBCIPair& from);

  inline OffsetBCIPair& operator=(const OffsetBCIPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffsetBCIPair& default_instance();

  void Swap(OffsetBCIPair* other);

  // implements Message ----------------------------------------------

  OffsetBCIPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffsetBCIPair& from);
  void MergeFrom(const OffsetBCIPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 BCI = 2;
  inline bool has_bci() const;
  inline void clear_bci();
  static const int kBCIFieldNumber = 2;
  inline ::google::protobuf::int32 bci() const;
  inline void set_bci(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.OffsetBCIPair)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_bci();
  inline void clear_has_bci();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 bci_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static OffsetBCIPair* default_instance_;
};
// -------------------------------------------------------------------

class MethodInfo : public ::google::protobuf::Message {
 public:
  MethodInfo();
  virtual ~MethodInfo();

  MethodInfo(const MethodInfo& from);

  inline MethodInfo& operator=(const MethodInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MethodInfo& default_instance();

  void Swap(MethodInfo* other);

  // implements Message ----------------------------------------------

  MethodInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MethodInfo& from);
  void MergeFrom(const MethodInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MethodInfo_Kind Kind;
  static const Kind OPTIMIZED = MethodInfo_Kind_OPTIMIZED;
  static const Kind BOOT = MethodInfo_Kind_BOOT;
  static const Kind BASELINE = MethodInfo_Kind_BASELINE;
  static const Kind NATIVE = MethodInfo_Kind_NATIVE;
  static inline bool Kind_IsValid(int value) {
    return MethodInfo_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    MethodInfo_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    MethodInfo_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    MethodInfo_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return MethodInfo_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return MethodInfo_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return MethodInfo_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 beginIP = 2;
  inline bool has_beginip() const;
  inline void clear_beginip();
  static const int kBeginIPFieldNumber = 2;
  inline ::google::protobuf::int64 beginip() const;
  inline void set_beginip(::google::protobuf::int64 value);

  // required int64 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 classId = 5;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassIdFieldNumber = 5;
  inline ::google::protobuf::int32 classid() const;
  inline void set_classid(::google::protobuf::int32 value);

  // optional .MaxSimInterface.MethodInfo.Kind kind = 6;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 6;
  inline ::MaxSimInterface::MethodInfo_Kind kind() const;
  inline void set_kind(::MaxSimInterface::MethodInfo_Kind value);

  // repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
  inline int offsetbcipair_size() const;
  inline void clear_offsetbcipair();
  static const int kOffsetBCIPairFieldNumber = 7;
  inline const ::MaxSimInterface::OffsetBCIPair& offsetbcipair(int index) const;
  inline ::MaxSimInterface::OffsetBCIPair* mutable_offsetbcipair(int index);
  inline ::MaxSimInterface::OffsetBCIPair* add_offsetbcipair();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::OffsetBCIPair >&
      offsetbcipair() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::OffsetBCIPair >*
      mutable_offsetbcipair();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.MethodInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_beginip();
  inline void clear_has_beginip();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_kind();
  inline void clear_has_kind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 beginip_;
  ::google::protobuf::int64 size_;
  ::std::string* desc_;
  ::google::protobuf::int32 classid_;
  int kind_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::OffsetBCIPair > offsetbcipair_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static MethodInfo* default_instance_;
};
// -------------------------------------------------------------------

class FieldInfo : public ::google::protobuf::Message {
 public:
  FieldInfo();
  virtual ~FieldInfo();

  FieldInfo(const FieldInfo& from);

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldInfo& default_instance();

  void Swap(FieldInfo* other);

  // implements Message ----------------------------------------------

  FieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldInfo& from);
  void MergeFrom(const FieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FieldInfo_Property Property;
  static const Property FINAL = FieldInfo_Property_FINAL;
  static inline bool Property_IsValid(int value) {
    return FieldInfo_Property_IsValid(value);
  }
  static const Property Property_MIN =
    FieldInfo_Property_Property_MIN;
  static const Property Property_MAX =
    FieldInfo_Property_Property_MAX;
  static const int Property_ARRAYSIZE =
    FieldInfo_Property_Property_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Property_descriptor() {
    return FieldInfo_Property_descriptor();
  }
  static inline const ::std::string& Property_Name(Property value) {
    return FieldInfo_Property_Name(value);
  }
  static inline bool Property_Parse(const ::std::string& name,
      Property* value) {
    return FieldInfo_Property_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 classId = 2;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassIdFieldNumber = 2;
  inline ::google::protobuf::int32 classid() const;
  inline void set_classid(::google::protobuf::int32 value);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.FieldInfo.Property property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline ::MaxSimInterface::FieldInfo_Property property(int index) const;
  inline void set_property(int index, ::MaxSimInterface::FieldInfo_Property value);
  inline void add_property(::MaxSimInterface::FieldInfo_Property value);
  inline const ::google::protobuf::RepeatedField<int>& property() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_property();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.FieldInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 classid_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedField<int> property_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static FieldInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClassInfo : public ::google::protobuf::Message {
 public:
  ClassInfo();
  virtual ~ClassInfo();

  ClassInfo(const ClassInfo& from);

  inline ClassInfo& operator=(const ClassInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassInfo& default_instance();

  void Swap(ClassInfo* other);

  // implements Message ----------------------------------------------

  ClassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassInfo& from);
  void MergeFrom(const ClassInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClassInfo_Kind Kind;
  static const Kind TUPLE = ClassInfo_Kind_TUPLE;
  static const Kind ARRAY = ClassInfo_Kind_ARRAY;
  static const Kind PRIMITIVE = ClassInfo_Kind_PRIMITIVE;
  static const Kind HYBRID = ClassInfo_Kind_HYBRID;
  static const Kind OTHER = ClassInfo_Kind_OTHER;
  static inline bool Kind_IsValid(int value) {
    return ClassInfo_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    ClassInfo_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    ClassInfo_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    ClassInfo_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return ClassInfo_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return ClassInfo_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return ClassInfo_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .MaxSimInterface.ClassInfo.Kind kind = 3;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 3;
  inline ::MaxSimInterface::ClassInfo_Kind kind() const;
  inline void set_kind(::MaxSimInterface::ClassInfo_Kind value);

  // optional int32 componentId = 4;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIdFieldNumber = 4;
  inline ::google::protobuf::int32 componentid() const;
  inline void set_componentid(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
  inline int fieldinfo_size() const;
  inline void clear_fieldinfo();
  static const int kFieldInfoFieldNumber = 5;
  inline const ::MaxSimInterface::FieldInfo& fieldinfo(int index) const;
  inline ::MaxSimInterface::FieldInfo* mutable_fieldinfo(int index);
  inline ::MaxSimInterface::FieldInfo* add_fieldinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldInfo >&
      fieldinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldInfo >*
      mutable_fieldinfo();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.ClassInfo)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_componentid();
  inline void clear_has_componentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  ::google::protobuf::int32 id_;
  int kind_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldInfo > fieldinfo_;
  ::google::protobuf::int32 componentid_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static ClassInfo* default_instance_;
};
// -------------------------------------------------------------------

class MaxineInfoDB : public ::google::protobuf::Message {
 public:
  MaxineInfoDB();
  virtual ~MaxineInfoDB();

  MaxineInfoDB(const MaxineInfoDB& from);

  inline MaxineInfoDB& operator=(const MaxineInfoDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxineInfoDB& default_instance();

  void Swap(MaxineInfoDB* other);

  // implements Message ----------------------------------------------

  MaxineInfoDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxineInfoDB& from);
  void MergeFrom(const MaxineInfoDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // required int32 maxClassInfoId = 2;
  inline bool has_maxclassinfoid() const;
  inline void clear_maxclassinfoid();
  static const int kMaxClassInfoIdFieldNumber = 2;
  inline ::google::protobuf::int32 maxclassinfoid() const;
  inline void set_maxclassinfoid(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.ClassInfo classInfo = 3;
  inline int classinfo_size() const;
  inline void clear_classinfo();
  static const int kClassInfoFieldNumber = 3;
  inline const ::MaxSimInterface::ClassInfo& classinfo(int index) const;
  inline ::MaxSimInterface::ClassInfo* mutable_classinfo(int index);
  inline ::MaxSimInterface::ClassInfo* add_classinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassInfo >&
      classinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassInfo >*
      mutable_classinfo();

  // repeated .MaxSimInterface.MethodInfo methodInfo = 4;
  inline int methodinfo_size() const;
  inline void clear_methodinfo();
  static const int kMethodInfoFieldNumber = 4;
  inline const ::MaxSimInterface::MethodInfo& methodinfo(int index) const;
  inline ::MaxSimInterface::MethodInfo* mutable_methodinfo(int index);
  inline ::MaxSimInterface::MethodInfo* add_methodinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::MethodInfo >&
      methodinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::MethodInfo >*
      mutable_methodinfo();

  // required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
  inline bool has_bootcodereginfo() const;
  inline void clear_bootcodereginfo();
  static const int kBootCodeRegInfoFieldNumber = 5;
  inline const ::MaxSimInterface::MethodInfo& bootcodereginfo() const;
  inline ::MaxSimInterface::MethodInfo* mutable_bootcodereginfo();
  inline ::MaxSimInterface::MethodInfo* release_bootcodereginfo();
  inline void set_allocated_bootcodereginfo(::MaxSimInterface::MethodInfo* bootcodereginfo);

  // required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
  inline bool has_maxsimconfig() const;
  inline void clear_maxsimconfig();
  static const int kMaxSimConfigFieldNumber = 6;
  inline const ::MaxSimInterface::MaxSimConfig& maxsimconfig() const;
  inline ::MaxSimInterface::MaxSimConfig* mutable_maxsimconfig();
  inline ::MaxSimInterface::MaxSimConfig* release_maxsimconfig();
  inline void set_allocated_maxsimconfig(::MaxSimInterface::MaxSimConfig* maxsimconfig);

  // required int32 nullCheckOffset = 7;
  inline bool has_nullcheckoffset() const;
  inline void clear_nullcheckoffset();
  static const int kNullCheckOffsetFieldNumber = 7;
  inline ::google::protobuf::int32 nullcheckoffset() const;
  inline void set_nullcheckoffset(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
  inline int datatransinfo_size() const;
  inline void clear_datatransinfo();
  static const int kDataTransInfoFieldNumber = 8;
  inline const ::MaxSimInterface::DataTransInfo& datatransinfo(int index) const;
  inline ::MaxSimInterface::DataTransInfo* mutable_datatransinfo(int index);
  inline ::MaxSimInterface::DataTransInfo* add_datatransinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >&
      datatransinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >*
      mutable_datatransinfo();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.MaxineInfoDB)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_maxclassinfoid();
  inline void clear_has_maxclassinfoid();
  inline void set_has_bootcodereginfo();
  inline void clear_has_bootcodereginfo();
  inline void set_has_maxsimconfig();
  inline void clear_has_maxsimconfig();
  inline void set_has_nullcheckoffset();
  inline void clear_has_nullcheckoffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 key_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassInfo > classinfo_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::MethodInfo > methodinfo_;
  ::google::protobuf::int32 maxclassinfoid_;
  ::google::protobuf::int32 nullcheckoffset_;
  ::MaxSimInterface::MethodInfo* bootcodereginfo_;
  ::MaxSimInterface::MaxSimConfig* maxsimconfig_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo > datatransinfo_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static MaxineInfoDB* default_instance_;
};
// -------------------------------------------------------------------

class AllocProf : public ::google::protobuf::Message {
 public:
  AllocProf();
  virtual ~AllocProf();

  AllocProf(const AllocProf& from);

  inline AllocProf& operator=(const AllocProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocProf& default_instance();

  void Swap(AllocProf* other);

  // implements Message ----------------------------------------------

  AllocProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocProf& from);
  void MergeFrom(const AllocProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int64 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.AllocProf)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static AllocProf* default_instance_;
};
// -------------------------------------------------------------------

class CacheMissProf : public ::google::protobuf::Message {
 public:
  CacheMissProf();
  virtual ~CacheMissProf();

  CacheMissProf(const CacheMissProf& from);

  inline CacheMissProf& operator=(const CacheMissProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheMissProf& default_instance();

  void Swap(CacheMissProf* other);

  // implements Message ----------------------------------------------

  CacheMissProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheMissProf& from);
  void MergeFrom(const CacheMissProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // required int64 IP = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 2;
  inline ::google::protobuf::int64 ip() const;
  inline void set_ip(::google::protobuf::int64 value);

  // required int32 classId = 3;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassIdFieldNumber = 3;
  inline ::google::protobuf::int32 classid() const;
  inline void set_classid(::google::protobuf::int32 value);

  // required int32 offsetLo = 4;
  inline bool has_offsetlo() const;
  inline void clear_offsetlo();
  static const int kOffsetLoFieldNumber = 4;
  inline ::google::protobuf::int32 offsetlo() const;
  inline void set_offsetlo(::google::protobuf::int32 value);

  // required int32 offsetHi = 5;
  inline bool has_offsethi() const;
  inline void clear_offsethi();
  static const int kOffsetHiFieldNumber = 5;
  inline ::google::protobuf::int32 offsethi() const;
  inline void set_offsethi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.CacheMissProf)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_offsetlo();
  inline void clear_has_offsetlo();
  inline void set_has_offsethi();
  inline void clear_has_offsethi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 ip_;
  ::google::protobuf::int32 classid_;
  ::google::protobuf::int32 offsetlo_;
  ::google::protobuf::int32 offsethi_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static CacheMissProf* default_instance_;
};
// -------------------------------------------------------------------

class CacheRWGroupInfo : public ::google::protobuf::Message {
 public:
  CacheRWGroupInfo();
  virtual ~CacheRWGroupInfo();

  CacheRWGroupInfo(const CacheRWGroupInfo& from);

  inline CacheRWGroupInfo& operator=(const CacheRWGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheRWGroupInfo& default_instance();

  void Swap(CacheRWGroupInfo* other);

  // implements Message ----------------------------------------------

  CacheRWGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheRWGroupInfo& from);
  void MergeFrom(const CacheRWGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cacheRWGroupId = 1;
  inline bool has_cacherwgroupid() const;
  inline void clear_cacherwgroupid();
  static const int kCacheRWGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 cacherwgroupid() const;
  inline void set_cacherwgroupid(::google::protobuf::int32 value);

  // required int32 cacheGroupId = 2;
  inline bool has_cachegroupid() const;
  inline void clear_cachegroupid();
  static const int kCacheGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 cachegroupid() const;
  inline void set_cachegroupid(::google::protobuf::int32 value);

  // required string cacheGroupName = 3;
  inline bool has_cachegroupname() const;
  inline void clear_cachegroupname();
  static const int kCacheGroupNameFieldNumber = 3;
  inline const ::std::string& cachegroupname() const;
  inline void set_cachegroupname(const ::std::string& value);
  inline void set_cachegroupname(const char* value);
  inline void set_cachegroupname(const char* value, size_t size);
  inline ::std::string* mutable_cachegroupname();
  inline ::std::string* release_cachegroupname();
  inline void set_allocated_cachegroupname(::std::string* cachegroupname);

  // required bool isWrite = 4;
  inline bool has_iswrite() const;
  inline void clear_iswrite();
  static const int kIsWriteFieldNumber = 4;
  inline bool iswrite() const;
  inline void set_iswrite(bool value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.CacheRWGroupInfo)
 private:
  inline void set_has_cacherwgroupid();
  inline void clear_has_cacherwgroupid();
  inline void set_has_cachegroupid();
  inline void clear_has_cachegroupid();
  inline void set_has_cachegroupname();
  inline void clear_has_cachegroupname();
  inline void set_has_iswrite();
  inline void clear_has_iswrite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cacherwgroupid_;
  ::google::protobuf::int32 cachegroupid_;
  ::std::string* cachegroupname_;
  bool iswrite_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static CacheRWGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class CacheRWGroupMissProf : public ::google::protobuf::Message {
 public:
  CacheRWGroupMissProf();
  virtual ~CacheRWGroupMissProf();

  CacheRWGroupMissProf(const CacheRWGroupMissProf& from);

  inline CacheRWGroupMissProf& operator=(const CacheRWGroupMissProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheRWGroupMissProf& default_instance();

  void Swap(CacheRWGroupMissProf* other);

  // implements Message ----------------------------------------------

  CacheRWGroupMissProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheRWGroupMissProf& from);
  void MergeFrom(const CacheRWGroupMissProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
  inline int cachemissprof_size() const;
  inline void clear_cachemissprof();
  static const int kCacheMissProfFieldNumber = 1;
  inline const ::MaxSimInterface::CacheMissProf& cachemissprof(int index) const;
  inline ::MaxSimInterface::CacheMissProf* mutable_cachemissprof(int index);
  inline ::MaxSimInterface::CacheMissProf* add_cachemissprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheMissProf >&
      cachemissprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheMissProf >*
      mutable_cachemissprof();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.CacheRWGroupMissProf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheMissProf > cachemissprof_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static CacheRWGroupMissProf* default_instance_;
};
// -------------------------------------------------------------------

class AllocSiteProf : public ::google::protobuf::Message {
 public:
  AllocSiteProf();
  virtual ~AllocSiteProf();

  AllocSiteProf(const AllocSiteProf& from);

  inline AllocSiteProf& operator=(const AllocSiteProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocSiteProf& default_instance();

  void Swap(AllocSiteProf* other);

  // implements Message ----------------------------------------------

  AllocSiteProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocSiteProf& from);
  void MergeFrom(const AllocSiteProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 IP = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 2;
  inline ::google::protobuf::int64 ip() const;
  inline void set_ip(::google::protobuf::int64 value);

  // required int32 classId = 3;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassIdFieldNumber = 3;
  inline ::google::protobuf::int32 classid() const;
  inline void set_classid(::google::protobuf::int32 value);

  // required int64 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.AllocSiteProf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 classid_;
  ::google::protobuf::int64 count_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static AllocSiteProf* default_instance_;
};
// -------------------------------------------------------------------

class FieldProf : public ::google::protobuf::Message {
 public:
  FieldProf();
  virtual ~FieldProf();

  FieldProf(const FieldProf& from);

  inline FieldProf& operator=(const FieldProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldProf& default_instance();

  void Swap(FieldProf* other);

  // implements Message ----------------------------------------------

  FieldProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldProf& from);
  void MergeFrom(const FieldProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int64 readCount = 2;
  inline bool has_readcount() const;
  inline void clear_readcount();
  static const int kReadCountFieldNumber = 2;
  inline ::google::protobuf::int64 readcount() const;
  inline void set_readcount(::google::protobuf::int64 value);

  // required int64 writeCount = 3;
  inline bool has_writecount() const;
  inline void clear_writecount();
  static const int kWriteCountFieldNumber = 3;
  inline ::google::protobuf::int64 writecount() const;
  inline void set_writecount(::google::protobuf::int64 value);

  // repeated int64 cacheRWGroupMissCount = 4;
  inline int cacherwgroupmisscount_size() const;
  inline void clear_cacherwgroupmisscount();
  static const int kCacheRWGroupMissCountFieldNumber = 4;
  inline ::google::protobuf::int64 cacherwgroupmisscount(int index) const;
  inline void set_cacherwgroupmisscount(int index, ::google::protobuf::int64 value);
  inline void add_cacherwgroupmisscount(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      cacherwgroupmisscount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_cacherwgroupmisscount();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.FieldProf)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_readcount();
  inline void clear_has_readcount();
  inline void set_has_writecount();
  inline void clear_has_writecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 readcount_;
  ::google::protobuf::int64 writecount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > cacherwgroupmisscount_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static FieldProf* default_instance_;
};
// -------------------------------------------------------------------

class ClassProf : public ::google::protobuf::Message {
 public:
  ClassProf();
  virtual ~ClassProf();

  ClassProf(const ClassProf& from);

  inline ClassProf& operator=(const ClassProf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassProf& default_instance();

  void Swap(ClassProf* other);

  // implements Message ----------------------------------------------

  ClassProf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassProf& from);
  void MergeFrom(const ClassProf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.AllocProf allocProf = 2;
  inline int allocprof_size() const;
  inline void clear_allocprof();
  static const int kAllocProfFieldNumber = 2;
  inline const ::MaxSimInterface::AllocProf& allocprof(int index) const;
  inline ::MaxSimInterface::AllocProf* mutable_allocprof(int index);
  inline ::MaxSimInterface::AllocProf* add_allocprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocProf >&
      allocprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocProf >*
      mutable_allocprof();

  // repeated .MaxSimInterface.FieldProf fieldProf = 3;
  inline int fieldprof_size() const;
  inline void clear_fieldprof();
  static const int kFieldProfFieldNumber = 3;
  inline const ::MaxSimInterface::FieldProf& fieldprof(int index) const;
  inline ::MaxSimInterface::FieldProf* mutable_fieldprof(int index);
  inline ::MaxSimInterface::FieldProf* add_fieldprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldProf >&
      fieldprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldProf >*
      mutable_fieldprof();

  // required int64 memAllSize = 4;
  inline bool has_memallsize() const;
  inline void clear_memallsize();
  static const int kMemAllSizeFieldNumber = 4;
  inline ::google::protobuf::int64 memallsize() const;
  inline void set_memallsize(::google::protobuf::int64 value);

  // required int64 memAllCount = 5;
  inline bool has_memallcount() const;
  inline void clear_memallcount();
  static const int kMemAllCountFieldNumber = 5;
  inline ::google::protobuf::int64 memallcount() const;
  inline void set_memallcount(::google::protobuf::int64 value);

  // required int64 memAccCount = 6;
  inline bool has_memacccount() const;
  inline void clear_memacccount();
  static const int kMemAccCountFieldNumber = 6;
  inline ::google::protobuf::int64 memacccount() const;
  inline void set_memacccount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MaxSimInterface.ClassProf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_memallsize();
  inline void clear_has_memallsize();
  inline void set_has_memallcount();
  inline void clear_has_memallcount();
  inline void set_has_memacccount();
  inline void clear_has_memacccount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocProf > allocprof_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldProf > fieldprof_;
  ::google::protobuf::int64 memallsize_;
  ::google::protobuf::int64 memallcount_;
  ::google::protobuf::int64 memacccount_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static ClassProf* default_instance_;
};
// -------------------------------------------------------------------

class ZSimProfDB : public ::google::protobuf::Message {
 public:
  ZSimProfDB();
  virtual ~ZSimProfDB();

  ZSimProfDB(const ZSimProfDB& from);

  inline ZSimProfDB& operator=(const ZSimProfDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZSimProfDB& default_instance();

  void Swap(ZSimProfDB* other);

  // implements Message ----------------------------------------------

  ZSimProfDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZSimProfDB& from);
  void MergeFrom(const ZSimProfDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 maxAllocSiteProfId = 1;
  inline bool has_maxallocsiteprofid() const;
  inline void clear_maxallocsiteprofid();
  static const int kMaxAllocSiteProfIdFieldNumber = 1;
  inline ::google::protobuf::int32 maxallocsiteprofid() const;
  inline void set_maxallocsiteprofid(::google::protobuf::int32 value);

  // required int32 dumpEventualStatsBeg = 2;
  inline bool has_dumpeventualstatsbeg() const;
  inline void clear_dumpeventualstatsbeg();
  static const int kDumpEventualStatsBegFieldNumber = 2;
  inline ::google::protobuf::int32 dumpeventualstatsbeg() const;
  inline void set_dumpeventualstatsbeg(::google::protobuf::int32 value);

  // required int32 dumpEventualStatsEnd = 3;
  inline bool has_dumpeventualstatsend() const;
  inline void clear_dumpeventualstatsend();
  static const int kDumpEventualStatsEndFieldNumber = 3;
  inline ::google::protobuf::int32 dumpeventualstatsend() const;
  inline void set_dumpeventualstatsend(::google::protobuf::int32 value);

  // repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
  inline int cacherwgroupinfo_size() const;
  inline void clear_cacherwgroupinfo();
  static const int kCacheRWGroupInfoFieldNumber = 4;
  inline const ::MaxSimInterface::CacheRWGroupInfo& cacherwgroupinfo(int index) const;
  inline ::MaxSimInterface::CacheRWGroupInfo* mutable_cacherwgroupinfo(int index);
  inline ::MaxSimInterface::CacheRWGroupInfo* add_cacherwgroupinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupInfo >&
      cacherwgroupinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupInfo >*
      mutable_cacherwgroupinfo();

  // repeated .MaxSimInterface.ClassProf classProf = 5;
  inline int classprof_size() const;
  inline void clear_classprof();
  static const int kClassProfFieldNumber = 5;
  inline const ::MaxSimInterface::ClassProf& classprof(int index) const;
  inline ::MaxSimInterface::ClassProf* mutable_classprof(int index);
  inline ::MaxSimInterface::ClassProf* add_classprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassProf >&
      classprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassProf >*
      mutable_classprof();

  // repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
  inline int cacherwgroupmissprof_size() const;
  inline void clear_cacherwgroupmissprof();
  static const int kCacheRWGroupMissProfFieldNumber = 6;
  inline const ::MaxSimInterface::CacheRWGroupMissProf& cacherwgroupmissprof(int index) const;
  inline ::MaxSimInterface::CacheRWGroupMissProf* mutable_cacherwgroupmissprof(int index);
  inline ::MaxSimInterface::CacheRWGroupMissProf* add_cacherwgroupmissprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupMissProf >&
      cacherwgroupmissprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupMissProf >*
      mutable_cacherwgroupmissprof();

  // repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
  inline int allocsiteprof_size() const;
  inline void clear_allocsiteprof();
  static const int kAllocSiteProfFieldNumber = 7;
  inline const ::MaxSimInterface::AllocSiteProf& allocsiteprof(int index) const;
  inline ::MaxSimInterface::AllocSiteProf* mutable_allocsiteprof(int index);
  inline ::MaxSimInterface::AllocSiteProf* add_allocsiteprof();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocSiteProf >&
      allocsiteprof() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocSiteProf >*
      mutable_allocsiteprof();

  // @@protoc_insertion_point(class_scope:MaxSimInterface.ZSimProfDB)
 private:
  inline void set_has_maxallocsiteprofid();
  inline void clear_has_maxallocsiteprofid();
  inline void set_has_dumpeventualstatsbeg();
  inline void clear_has_dumpeventualstatsbeg();
  inline void set_has_dumpeventualstatsend();
  inline void clear_has_dumpeventualstatsend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 maxallocsiteprofid_;
  ::google::protobuf::int32 dumpeventualstatsbeg_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupInfo > cacherwgroupinfo_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassProf > classprof_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupMissProf > cacherwgroupmissprof_;
  ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocSiteProf > allocsiteprof_;
  ::google::protobuf::int32 dumpeventualstatsend_;
  friend void  protobuf_AddDesc_MaxSimInterface_2eproto();
  friend void protobuf_AssignDesc_MaxSimInterface_2eproto();
  friend void protobuf_ShutdownFile_MaxSimInterface_2eproto();

  void InitAsDefaultInstance();
  static ZSimProfDB* default_instance_;
};
// ===================================================================


// ===================================================================

// MaxSimConfig

// optional bool isMaxSimEnabled = 1 [default = true];
inline bool MaxSimConfig::has_ismaxsimenabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxSimConfig::set_has_ismaxsimenabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxSimConfig::clear_has_ismaxsimenabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxSimConfig::clear_ismaxsimenabled() {
  ismaxsimenabled_ = true;
  clear_has_ismaxsimenabled();
}
inline bool MaxSimConfig::ismaxsimenabled() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxSimConfig.isMaxSimEnabled)
  return ismaxsimenabled_;
}
inline void MaxSimConfig::set_ismaxsimenabled(bool value) {
  set_has_ismaxsimenabled();
  ismaxsimenabled_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxSimConfig.isMaxSimEnabled)
}

// optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
inline bool MaxSimConfig::has_pointertaggingtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxSimConfig::set_has_pointertaggingtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxSimConfig::clear_has_pointertaggingtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxSimConfig::clear_pointertaggingtype() {
  pointertaggingtype_ = 1;
  clear_has_pointertaggingtype();
}
inline ::MaxSimInterface::PointerTaggingType MaxSimConfig::pointertaggingtype() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxSimConfig.pointerTaggingType)
  return static_cast< ::MaxSimInterface::PointerTaggingType >(pointertaggingtype_);
}
inline void MaxSimConfig::set_pointertaggingtype(::MaxSimInterface::PointerTaggingType value) {
  assert(::MaxSimInterface::PointerTaggingType_IsValid(value));
  set_has_pointertaggingtype();
  pointertaggingtype_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxSimConfig.pointerTaggingType)
}

// optional int32 layoutScaleFactor = 3 [default = 1];
inline bool MaxSimConfig::has_layoutscalefactor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaxSimConfig::set_has_layoutscalefactor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaxSimConfig::clear_has_layoutscalefactor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaxSimConfig::clear_layoutscalefactor() {
  layoutscalefactor_ = 1;
  clear_has_layoutscalefactor();
}
inline ::google::protobuf::int32 MaxSimConfig::layoutscalefactor() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxSimConfig.layoutScaleFactor)
  return layoutscalefactor_;
}
inline void MaxSimConfig::set_layoutscalefactor(::google::protobuf::int32 value) {
  set_has_layoutscalefactor();
  layoutscalefactor_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxSimConfig.layoutScaleFactor)
}

// optional int32 layoutScaleRefFactor = 4 [default = 1];
inline bool MaxSimConfig::has_layoutscalereffactor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaxSimConfig::set_has_layoutscalereffactor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaxSimConfig::clear_has_layoutscalereffactor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaxSimConfig::clear_layoutscalereffactor() {
  layoutscalereffactor_ = 1;
  clear_has_layoutscalereffactor();
}
inline ::google::protobuf::int32 MaxSimConfig::layoutscalereffactor() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxSimConfig.layoutScaleRefFactor)
  return layoutscalereffactor_;
}
inline void MaxSimConfig::set_layoutscalereffactor(::google::protobuf::int32 value) {
  set_has_layoutscalereffactor();
  layoutscalereffactor_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxSimConfig.layoutScaleRefFactor)
}

// -------------------------------------------------------------------

// FieldOffsetRemapPair

// required int32 fromOffset = 1;
inline bool FieldOffsetRemapPair::has_fromoffset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldOffsetRemapPair::set_has_fromoffset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldOffsetRemapPair::clear_has_fromoffset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldOffsetRemapPair::clear_fromoffset() {
  fromoffset_ = 0;
  clear_has_fromoffset();
}
inline ::google::protobuf::int32 FieldOffsetRemapPair::fromoffset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldOffsetRemapPair.fromOffset)
  return fromoffset_;
}
inline void FieldOffsetRemapPair::set_fromoffset(::google::protobuf::int32 value) {
  set_has_fromoffset();
  fromoffset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldOffsetRemapPair.fromOffset)
}

// required int32 toOffset = 2;
inline bool FieldOffsetRemapPair::has_tooffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldOffsetRemapPair::set_has_tooffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldOffsetRemapPair::clear_has_tooffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldOffsetRemapPair::clear_tooffset() {
  tooffset_ = 0;
  clear_has_tooffset();
}
inline ::google::protobuf::int32 FieldOffsetRemapPair::tooffset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldOffsetRemapPair.toOffset)
  return tooffset_;
}
inline void FieldOffsetRemapPair::set_tooffset(::google::protobuf::int32 value) {
  set_has_tooffset();
  tooffset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldOffsetRemapPair.toOffset)
}

// -------------------------------------------------------------------

// DataTransInfo

// required string typeDesc = 1;
inline bool DataTransInfo::has_typedesc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTransInfo::set_has_typedesc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataTransInfo::clear_has_typedesc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataTransInfo::clear_typedesc() {
  if (typedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typedesc_->clear();
  }
  clear_has_typedesc();
}
inline const ::std::string& DataTransInfo::typedesc() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.DataTransInfo.typeDesc)
  return *typedesc_;
}
inline void DataTransInfo::set_typedesc(const ::std::string& value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.DataTransInfo.typeDesc)
}
inline void DataTransInfo::set_typedesc(const char* value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.DataTransInfo.typeDesc)
}
inline void DataTransInfo::set_typedesc(const char* value, size_t size) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.DataTransInfo.typeDesc)
}
inline ::std::string* DataTransInfo::mutable_typedesc() {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typedesc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.DataTransInfo.typeDesc)
  return typedesc_;
}
inline ::std::string* DataTransInfo::release_typedesc() {
  clear_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typedesc_;
    typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataTransInfo::set_allocated_typedesc(::std::string* typedesc) {
  if (typedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typedesc_;
  }
  if (typedesc) {
    set_has_typedesc();
    typedesc_ = typedesc;
  } else {
    clear_has_typedesc();
    typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.DataTransInfo.typeDesc)
}

// optional int32 transTag = 2;
inline bool DataTransInfo::has_transtag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTransInfo::set_has_transtag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataTransInfo::clear_has_transtag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataTransInfo::clear_transtag() {
  transtag_ = 0;
  clear_has_transtag();
}
inline ::google::protobuf::int32 DataTransInfo::transtag() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.DataTransInfo.transTag)
  return transtag_;
}
inline void DataTransInfo::set_transtag(::google::protobuf::int32 value) {
  set_has_transtag();
  transtag_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.DataTransInfo.transTag)
}

// repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
inline int DataTransInfo::fieldoffsetremappairs_size() const {
  return fieldoffsetremappairs_.size();
}
inline void DataTransInfo::clear_fieldoffsetremappairs() {
  fieldoffsetremappairs_.Clear();
}
inline const ::MaxSimInterface::FieldOffsetRemapPair& DataTransInfo::fieldoffsetremappairs(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.DataTransInfo.fieldOffsetRemapPairs)
  return fieldoffsetremappairs_.Get(index);
}
inline ::MaxSimInterface::FieldOffsetRemapPair* DataTransInfo::mutable_fieldoffsetremappairs(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.DataTransInfo.fieldOffsetRemapPairs)
  return fieldoffsetremappairs_.Mutable(index);
}
inline ::MaxSimInterface::FieldOffsetRemapPair* DataTransInfo::add_fieldoffsetremappairs() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.DataTransInfo.fieldOffsetRemapPairs)
  return fieldoffsetremappairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldOffsetRemapPair >&
DataTransInfo::fieldoffsetremappairs() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.DataTransInfo.fieldOffsetRemapPairs)
  return fieldoffsetremappairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldOffsetRemapPair >*
DataTransInfo::mutable_fieldoffsetremappairs() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.DataTransInfo.fieldOffsetRemapPairs)
  return &fieldoffsetremappairs_;
}

// -------------------------------------------------------------------

// DataTransDB

// repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
inline int DataTransDB::datatransinfo_size() const {
  return datatransinfo_.size();
}
inline void DataTransDB::clear_datatransinfo() {
  datatransinfo_.Clear();
}
inline const ::MaxSimInterface::DataTransInfo& DataTransDB::datatransinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.DataTransDB.dataTransInfo)
  return datatransinfo_.Get(index);
}
inline ::MaxSimInterface::DataTransInfo* DataTransDB::mutable_datatransinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.DataTransDB.dataTransInfo)
  return datatransinfo_.Mutable(index);
}
inline ::MaxSimInterface::DataTransInfo* DataTransDB::add_datatransinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.DataTransDB.dataTransInfo)
  return datatransinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >&
DataTransDB::datatransinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.DataTransDB.dataTransInfo)
  return datatransinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >*
DataTransDB::mutable_datatransinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.DataTransDB.dataTransInfo)
  return &datatransinfo_;
}

// -------------------------------------------------------------------

// OffsetBCIPair

// required int32 offset = 1;
inline bool OffsetBCIPair::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffsetBCIPair::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffsetBCIPair::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffsetBCIPair::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 OffsetBCIPair::offset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.OffsetBCIPair.offset)
  return offset_;
}
inline void OffsetBCIPair::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.OffsetBCIPair.offset)
}

// required int32 BCI = 2;
inline bool OffsetBCIPair::has_bci() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffsetBCIPair::set_has_bci() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffsetBCIPair::clear_has_bci() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffsetBCIPair::clear_bci() {
  bci_ = 0;
  clear_has_bci();
}
inline ::google::protobuf::int32 OffsetBCIPair::bci() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.OffsetBCIPair.BCI)
  return bci_;
}
inline void OffsetBCIPair::set_bci(::google::protobuf::int32 value) {
  set_has_bci();
  bci_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.OffsetBCIPair.BCI)
}

// -------------------------------------------------------------------

// MethodInfo

// required string name = 1;
inline bool MethodInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MethodInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MethodInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MethodInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MethodInfo::name() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.name)
  return *name_;
}
inline void MethodInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.name)
}
inline void MethodInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.MethodInfo.name)
}
inline void MethodInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.MethodInfo.name)
}
inline ::std::string* MethodInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MethodInfo.name)
  return name_;
}
inline ::std::string* MethodInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MethodInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.MethodInfo.name)
}

// required int64 beginIP = 2;
inline bool MethodInfo::has_beginip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MethodInfo::set_has_beginip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MethodInfo::clear_has_beginip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MethodInfo::clear_beginip() {
  beginip_ = GOOGLE_LONGLONG(0);
  clear_has_beginip();
}
inline ::google::protobuf::int64 MethodInfo::beginip() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.beginIP)
  return beginip_;
}
inline void MethodInfo::set_beginip(::google::protobuf::int64 value) {
  set_has_beginip();
  beginip_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.beginIP)
}

// required int64 size = 3;
inline bool MethodInfo::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MethodInfo::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MethodInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MethodInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 MethodInfo::size() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.size)
  return size_;
}
inline void MethodInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.size)
}

// optional string desc = 4;
inline bool MethodInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MethodInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MethodInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MethodInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& MethodInfo::desc() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.desc)
  return *desc_;
}
inline void MethodInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.desc)
}
inline void MethodInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.MethodInfo.desc)
}
inline void MethodInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.MethodInfo.desc)
}
inline ::std::string* MethodInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MethodInfo.desc)
  return desc_;
}
inline ::std::string* MethodInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MethodInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.MethodInfo.desc)
}

// optional int32 classId = 5;
inline bool MethodInfo::has_classid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MethodInfo::set_has_classid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MethodInfo::clear_has_classid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MethodInfo::clear_classid() {
  classid_ = 0;
  clear_has_classid();
}
inline ::google::protobuf::int32 MethodInfo::classid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.classId)
  return classid_;
}
inline void MethodInfo::set_classid(::google::protobuf::int32 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.classId)
}

// optional .MaxSimInterface.MethodInfo.Kind kind = 6;
inline bool MethodInfo::has_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MethodInfo::set_has_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MethodInfo::clear_has_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MethodInfo::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::MaxSimInterface::MethodInfo_Kind MethodInfo::kind() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.kind)
  return static_cast< ::MaxSimInterface::MethodInfo_Kind >(kind_);
}
inline void MethodInfo::set_kind(::MaxSimInterface::MethodInfo_Kind value) {
  assert(::MaxSimInterface::MethodInfo_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MethodInfo.kind)
}

// repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
inline int MethodInfo::offsetbcipair_size() const {
  return offsetbcipair_.size();
}
inline void MethodInfo::clear_offsetbcipair() {
  offsetbcipair_.Clear();
}
inline const ::MaxSimInterface::OffsetBCIPair& MethodInfo::offsetbcipair(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MethodInfo.offsetBCIPair)
  return offsetbcipair_.Get(index);
}
inline ::MaxSimInterface::OffsetBCIPair* MethodInfo::mutable_offsetbcipair(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MethodInfo.offsetBCIPair)
  return offsetbcipair_.Mutable(index);
}
inline ::MaxSimInterface::OffsetBCIPair* MethodInfo::add_offsetbcipair() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.MethodInfo.offsetBCIPair)
  return offsetbcipair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::OffsetBCIPair >&
MethodInfo::offsetbcipair() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.MethodInfo.offsetBCIPair)
  return offsetbcipair_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::OffsetBCIPair >*
MethodInfo::mutable_offsetbcipair() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.MethodInfo.offsetBCIPair)
  return &offsetbcipair_;
}

// -------------------------------------------------------------------

// FieldInfo

// required string name = 1;
inline bool FieldInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FieldInfo::name() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldInfo.name)
  return *name_;
}
inline void FieldInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldInfo.name)
}
inline void FieldInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.FieldInfo.name)
}
inline void FieldInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.FieldInfo.name)
}
inline ::std::string* FieldInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.FieldInfo.name)
  return name_;
}
inline ::std::string* FieldInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FieldInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.FieldInfo.name)
}

// required int32 classId = 2;
inline bool FieldInfo::has_classid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldInfo::set_has_classid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldInfo::clear_has_classid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldInfo::clear_classid() {
  classid_ = 0;
  clear_has_classid();
}
inline ::google::protobuf::int32 FieldInfo::classid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldInfo.classId)
  return classid_;
}
inline void FieldInfo::set_classid(::google::protobuf::int32 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldInfo.classId)
}

// required int32 offset = 3;
inline bool FieldInfo::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldInfo::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldInfo::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldInfo::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 FieldInfo::offset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldInfo.offset)
  return offset_;
}
inline void FieldInfo::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldInfo.offset)
}

// repeated .MaxSimInterface.FieldInfo.Property property = 4;
inline int FieldInfo::property_size() const {
  return property_.size();
}
inline void FieldInfo::clear_property() {
  property_.Clear();
}
inline ::MaxSimInterface::FieldInfo_Property FieldInfo::property(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldInfo.property)
  return static_cast< ::MaxSimInterface::FieldInfo_Property >(property_.Get(index));
}
inline void FieldInfo::set_property(int index, ::MaxSimInterface::FieldInfo_Property value) {
  assert(::MaxSimInterface::FieldInfo_Property_IsValid(value));
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldInfo.property)
}
inline void FieldInfo::add_property(::MaxSimInterface::FieldInfo_Property value) {
  assert(::MaxSimInterface::FieldInfo_Property_IsValid(value));
  property_.Add(value);
  // @@protoc_insertion_point(field_add:MaxSimInterface.FieldInfo.property)
}
inline const ::google::protobuf::RepeatedField<int>&
FieldInfo::property() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.FieldInfo.property)
  return property_;
}
inline ::google::protobuf::RepeatedField<int>*
FieldInfo::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.FieldInfo.property)
  return &property_;
}

// -------------------------------------------------------------------

// ClassInfo

// required string desc = 1;
inline bool ClassInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ClassInfo::desc() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassInfo.desc)
  return *desc_;
}
inline void ClassInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassInfo.desc)
}
inline void ClassInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.ClassInfo.desc)
}
inline void ClassInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.ClassInfo.desc)
}
inline ::std::string* ClassInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ClassInfo.desc)
  return desc_;
}
inline ::std::string* ClassInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.ClassInfo.desc)
}

// required int32 id = 2;
inline bool ClassInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClassInfo::id() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassInfo.id)
  return id_;
}
inline void ClassInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassInfo.id)
}

// required .MaxSimInterface.ClassInfo.Kind kind = 3;
inline bool ClassInfo::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassInfo::set_has_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassInfo::clear_has_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassInfo::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::MaxSimInterface::ClassInfo_Kind ClassInfo::kind() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassInfo.kind)
  return static_cast< ::MaxSimInterface::ClassInfo_Kind >(kind_);
}
inline void ClassInfo::set_kind(::MaxSimInterface::ClassInfo_Kind value) {
  assert(::MaxSimInterface::ClassInfo_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassInfo.kind)
}

// optional int32 componentId = 4;
inline bool ClassInfo::has_componentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClassInfo::set_has_componentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClassInfo::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClassInfo::clear_componentid() {
  componentid_ = 0;
  clear_has_componentid();
}
inline ::google::protobuf::int32 ClassInfo::componentid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassInfo.componentId)
  return componentid_;
}
inline void ClassInfo::set_componentid(::google::protobuf::int32 value) {
  set_has_componentid();
  componentid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassInfo.componentId)
}

// repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
inline int ClassInfo::fieldinfo_size() const {
  return fieldinfo_.size();
}
inline void ClassInfo::clear_fieldinfo() {
  fieldinfo_.Clear();
}
inline const ::MaxSimInterface::FieldInfo& ClassInfo::fieldinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassInfo.fieldInfo)
  return fieldinfo_.Get(index);
}
inline ::MaxSimInterface::FieldInfo* ClassInfo::mutable_fieldinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ClassInfo.fieldInfo)
  return fieldinfo_.Mutable(index);
}
inline ::MaxSimInterface::FieldInfo* ClassInfo::add_fieldinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ClassInfo.fieldInfo)
  return fieldinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldInfo >&
ClassInfo::fieldinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ClassInfo.fieldInfo)
  return fieldinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldInfo >*
ClassInfo::mutable_fieldinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ClassInfo.fieldInfo)
  return &fieldinfo_;
}

// -------------------------------------------------------------------

// MaxineInfoDB

// optional int64 key = 1;
inline bool MaxineInfoDB::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxineInfoDB::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxineInfoDB::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxineInfoDB::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 MaxineInfoDB::key() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.key)
  return key_;
}
inline void MaxineInfoDB::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxineInfoDB.key)
}

// required int32 maxClassInfoId = 2;
inline bool MaxineInfoDB::has_maxclassinfoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxineInfoDB::set_has_maxclassinfoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxineInfoDB::clear_has_maxclassinfoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxineInfoDB::clear_maxclassinfoid() {
  maxclassinfoid_ = 0;
  clear_has_maxclassinfoid();
}
inline ::google::protobuf::int32 MaxineInfoDB::maxclassinfoid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.maxClassInfoId)
  return maxclassinfoid_;
}
inline void MaxineInfoDB::set_maxclassinfoid(::google::protobuf::int32 value) {
  set_has_maxclassinfoid();
  maxclassinfoid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxineInfoDB.maxClassInfoId)
}

// repeated .MaxSimInterface.ClassInfo classInfo = 3;
inline int MaxineInfoDB::classinfo_size() const {
  return classinfo_.size();
}
inline void MaxineInfoDB::clear_classinfo() {
  classinfo_.Clear();
}
inline const ::MaxSimInterface::ClassInfo& MaxineInfoDB::classinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.classInfo)
  return classinfo_.Get(index);
}
inline ::MaxSimInterface::ClassInfo* MaxineInfoDB::mutable_classinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MaxineInfoDB.classInfo)
  return classinfo_.Mutable(index);
}
inline ::MaxSimInterface::ClassInfo* MaxineInfoDB::add_classinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.MaxineInfoDB.classInfo)
  return classinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassInfo >&
MaxineInfoDB::classinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.MaxineInfoDB.classInfo)
  return classinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassInfo >*
MaxineInfoDB::mutable_classinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.MaxineInfoDB.classInfo)
  return &classinfo_;
}

// repeated .MaxSimInterface.MethodInfo methodInfo = 4;
inline int MaxineInfoDB::methodinfo_size() const {
  return methodinfo_.size();
}
inline void MaxineInfoDB::clear_methodinfo() {
  methodinfo_.Clear();
}
inline const ::MaxSimInterface::MethodInfo& MaxineInfoDB::methodinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.methodInfo)
  return methodinfo_.Get(index);
}
inline ::MaxSimInterface::MethodInfo* MaxineInfoDB::mutable_methodinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MaxineInfoDB.methodInfo)
  return methodinfo_.Mutable(index);
}
inline ::MaxSimInterface::MethodInfo* MaxineInfoDB::add_methodinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.MaxineInfoDB.methodInfo)
  return methodinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::MethodInfo >&
MaxineInfoDB::methodinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.MaxineInfoDB.methodInfo)
  return methodinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::MethodInfo >*
MaxineInfoDB::mutable_methodinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.MaxineInfoDB.methodInfo)
  return &methodinfo_;
}

// required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
inline bool MaxineInfoDB::has_bootcodereginfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaxineInfoDB::set_has_bootcodereginfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaxineInfoDB::clear_has_bootcodereginfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaxineInfoDB::clear_bootcodereginfo() {
  if (bootcodereginfo_ != NULL) bootcodereginfo_->::MaxSimInterface::MethodInfo::Clear();
  clear_has_bootcodereginfo();
}
inline const ::MaxSimInterface::MethodInfo& MaxineInfoDB::bootcodereginfo() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.bootCodeRegInfo)
  return bootcodereginfo_ != NULL ? *bootcodereginfo_ : *default_instance_->bootcodereginfo_;
}
inline ::MaxSimInterface::MethodInfo* MaxineInfoDB::mutable_bootcodereginfo() {
  set_has_bootcodereginfo();
  if (bootcodereginfo_ == NULL) bootcodereginfo_ = new ::MaxSimInterface::MethodInfo;
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MaxineInfoDB.bootCodeRegInfo)
  return bootcodereginfo_;
}
inline ::MaxSimInterface::MethodInfo* MaxineInfoDB::release_bootcodereginfo() {
  clear_has_bootcodereginfo();
  ::MaxSimInterface::MethodInfo* temp = bootcodereginfo_;
  bootcodereginfo_ = NULL;
  return temp;
}
inline void MaxineInfoDB::set_allocated_bootcodereginfo(::MaxSimInterface::MethodInfo* bootcodereginfo) {
  delete bootcodereginfo_;
  bootcodereginfo_ = bootcodereginfo;
  if (bootcodereginfo) {
    set_has_bootcodereginfo();
  } else {
    clear_has_bootcodereginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.MaxineInfoDB.bootCodeRegInfo)
}

// required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
inline bool MaxineInfoDB::has_maxsimconfig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaxineInfoDB::set_has_maxsimconfig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaxineInfoDB::clear_has_maxsimconfig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaxineInfoDB::clear_maxsimconfig() {
  if (maxsimconfig_ != NULL) maxsimconfig_->::MaxSimInterface::MaxSimConfig::Clear();
  clear_has_maxsimconfig();
}
inline const ::MaxSimInterface::MaxSimConfig& MaxineInfoDB::maxsimconfig() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.MaxSimConfig)
  return maxsimconfig_ != NULL ? *maxsimconfig_ : *default_instance_->maxsimconfig_;
}
inline ::MaxSimInterface::MaxSimConfig* MaxineInfoDB::mutable_maxsimconfig() {
  set_has_maxsimconfig();
  if (maxsimconfig_ == NULL) maxsimconfig_ = new ::MaxSimInterface::MaxSimConfig;
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MaxineInfoDB.MaxSimConfig)
  return maxsimconfig_;
}
inline ::MaxSimInterface::MaxSimConfig* MaxineInfoDB::release_maxsimconfig() {
  clear_has_maxsimconfig();
  ::MaxSimInterface::MaxSimConfig* temp = maxsimconfig_;
  maxsimconfig_ = NULL;
  return temp;
}
inline void MaxineInfoDB::set_allocated_maxsimconfig(::MaxSimInterface::MaxSimConfig* maxsimconfig) {
  delete maxsimconfig_;
  maxsimconfig_ = maxsimconfig;
  if (maxsimconfig) {
    set_has_maxsimconfig();
  } else {
    clear_has_maxsimconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.MaxineInfoDB.MaxSimConfig)
}

// required int32 nullCheckOffset = 7;
inline bool MaxineInfoDB::has_nullcheckoffset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaxineInfoDB::set_has_nullcheckoffset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaxineInfoDB::clear_has_nullcheckoffset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaxineInfoDB::clear_nullcheckoffset() {
  nullcheckoffset_ = 0;
  clear_has_nullcheckoffset();
}
inline ::google::protobuf::int32 MaxineInfoDB::nullcheckoffset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.nullCheckOffset)
  return nullcheckoffset_;
}
inline void MaxineInfoDB::set_nullcheckoffset(::google::protobuf::int32 value) {
  set_has_nullcheckoffset();
  nullcheckoffset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.MaxineInfoDB.nullCheckOffset)
}

// repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
inline int MaxineInfoDB::datatransinfo_size() const {
  return datatransinfo_.size();
}
inline void MaxineInfoDB::clear_datatransinfo() {
  datatransinfo_.Clear();
}
inline const ::MaxSimInterface::DataTransInfo& MaxineInfoDB::datatransinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.MaxineInfoDB.dataTransInfo)
  return datatransinfo_.Get(index);
}
inline ::MaxSimInterface::DataTransInfo* MaxineInfoDB::mutable_datatransinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.MaxineInfoDB.dataTransInfo)
  return datatransinfo_.Mutable(index);
}
inline ::MaxSimInterface::DataTransInfo* MaxineInfoDB::add_datatransinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.MaxineInfoDB.dataTransInfo)
  return datatransinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >&
MaxineInfoDB::datatransinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.MaxineInfoDB.dataTransInfo)
  return datatransinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::DataTransInfo >*
MaxineInfoDB::mutable_datatransinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.MaxineInfoDB.dataTransInfo)
  return &datatransinfo_;
}

// -------------------------------------------------------------------

// AllocProf

// required int32 size = 1;
inline bool AllocProf::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocProf::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocProf::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocProf::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 AllocProf::size() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocProf.size)
  return size_;
}
inline void AllocProf::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocProf.size)
}

// required int64 count = 2;
inline bool AllocProf::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllocProf::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllocProf::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllocProf::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 AllocProf::count() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocProf.count)
  return count_;
}
inline void AllocProf::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocProf.count)
}

// -------------------------------------------------------------------

// CacheMissProf

// required int64 count = 1;
inline bool CacheMissProf::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheMissProf::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheMissProf::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheMissProf::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 CacheMissProf::count() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheMissProf.count)
  return count_;
}
inline void CacheMissProf::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheMissProf.count)
}

// required int64 IP = 2;
inline bool CacheMissProf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheMissProf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheMissProf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheMissProf::clear_ip() {
  ip_ = GOOGLE_LONGLONG(0);
  clear_has_ip();
}
inline ::google::protobuf::int64 CacheMissProf::ip() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheMissProf.IP)
  return ip_;
}
inline void CacheMissProf::set_ip(::google::protobuf::int64 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheMissProf.IP)
}

// required int32 classId = 3;
inline bool CacheMissProf::has_classid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheMissProf::set_has_classid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheMissProf::clear_has_classid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheMissProf::clear_classid() {
  classid_ = 0;
  clear_has_classid();
}
inline ::google::protobuf::int32 CacheMissProf::classid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheMissProf.classId)
  return classid_;
}
inline void CacheMissProf::set_classid(::google::protobuf::int32 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheMissProf.classId)
}

// required int32 offsetLo = 4;
inline bool CacheMissProf::has_offsetlo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheMissProf::set_has_offsetlo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheMissProf::clear_has_offsetlo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheMissProf::clear_offsetlo() {
  offsetlo_ = 0;
  clear_has_offsetlo();
}
inline ::google::protobuf::int32 CacheMissProf::offsetlo() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheMissProf.offsetLo)
  return offsetlo_;
}
inline void CacheMissProf::set_offsetlo(::google::protobuf::int32 value) {
  set_has_offsetlo();
  offsetlo_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheMissProf.offsetLo)
}

// required int32 offsetHi = 5;
inline bool CacheMissProf::has_offsethi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheMissProf::set_has_offsethi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheMissProf::clear_has_offsethi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheMissProf::clear_offsethi() {
  offsethi_ = 0;
  clear_has_offsethi();
}
inline ::google::protobuf::int32 CacheMissProf::offsethi() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheMissProf.offsetHi)
  return offsethi_;
}
inline void CacheMissProf::set_offsethi(::google::protobuf::int32 value) {
  set_has_offsethi();
  offsethi_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheMissProf.offsetHi)
}

// -------------------------------------------------------------------

// CacheRWGroupInfo

// required int32 cacheRWGroupId = 1;
inline bool CacheRWGroupInfo::has_cacherwgroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheRWGroupInfo::set_has_cacherwgroupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheRWGroupInfo::clear_has_cacherwgroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheRWGroupInfo::clear_cacherwgroupid() {
  cacherwgroupid_ = 0;
  clear_has_cacherwgroupid();
}
inline ::google::protobuf::int32 CacheRWGroupInfo::cacherwgroupid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheRWGroupInfo.cacheRWGroupId)
  return cacherwgroupid_;
}
inline void CacheRWGroupInfo::set_cacherwgroupid(::google::protobuf::int32 value) {
  set_has_cacherwgroupid();
  cacherwgroupid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheRWGroupInfo.cacheRWGroupId)
}

// required int32 cacheGroupId = 2;
inline bool CacheRWGroupInfo::has_cachegroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheRWGroupInfo::set_has_cachegroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheRWGroupInfo::clear_has_cachegroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheRWGroupInfo::clear_cachegroupid() {
  cachegroupid_ = 0;
  clear_has_cachegroupid();
}
inline ::google::protobuf::int32 CacheRWGroupInfo::cachegroupid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheRWGroupInfo.cacheGroupId)
  return cachegroupid_;
}
inline void CacheRWGroupInfo::set_cachegroupid(::google::protobuf::int32 value) {
  set_has_cachegroupid();
  cachegroupid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheRWGroupInfo.cacheGroupId)
}

// required string cacheGroupName = 3;
inline bool CacheRWGroupInfo::has_cachegroupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheRWGroupInfo::set_has_cachegroupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheRWGroupInfo::clear_has_cachegroupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheRWGroupInfo::clear_cachegroupname() {
  if (cachegroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cachegroupname_->clear();
  }
  clear_has_cachegroupname();
}
inline const ::std::string& CacheRWGroupInfo::cachegroupname() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
  return *cachegroupname_;
}
inline void CacheRWGroupInfo::set_cachegroupname(const ::std::string& value) {
  set_has_cachegroupname();
  if (cachegroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cachegroupname_ = new ::std::string;
  }
  cachegroupname_->assign(value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
}
inline void CacheRWGroupInfo::set_cachegroupname(const char* value) {
  set_has_cachegroupname();
  if (cachegroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cachegroupname_ = new ::std::string;
  }
  cachegroupname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
}
inline void CacheRWGroupInfo::set_cachegroupname(const char* value, size_t size) {
  set_has_cachegroupname();
  if (cachegroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cachegroupname_ = new ::std::string;
  }
  cachegroupname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
}
inline ::std::string* CacheRWGroupInfo::mutable_cachegroupname() {
  set_has_cachegroupname();
  if (cachegroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cachegroupname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
  return cachegroupname_;
}
inline ::std::string* CacheRWGroupInfo::release_cachegroupname() {
  clear_has_cachegroupname();
  if (cachegroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cachegroupname_;
    cachegroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CacheRWGroupInfo::set_allocated_cachegroupname(::std::string* cachegroupname) {
  if (cachegroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cachegroupname_;
  }
  if (cachegroupname) {
    set_has_cachegroupname();
    cachegroupname_ = cachegroupname;
  } else {
    clear_has_cachegroupname();
    cachegroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MaxSimInterface.CacheRWGroupInfo.cacheGroupName)
}

// required bool isWrite = 4;
inline bool CacheRWGroupInfo::has_iswrite() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheRWGroupInfo::set_has_iswrite() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheRWGroupInfo::clear_has_iswrite() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheRWGroupInfo::clear_iswrite() {
  iswrite_ = false;
  clear_has_iswrite();
}
inline bool CacheRWGroupInfo::iswrite() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheRWGroupInfo.isWrite)
  return iswrite_;
}
inline void CacheRWGroupInfo::set_iswrite(bool value) {
  set_has_iswrite();
  iswrite_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.CacheRWGroupInfo.isWrite)
}

// -------------------------------------------------------------------

// CacheRWGroupMissProf

// repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
inline int CacheRWGroupMissProf::cachemissprof_size() const {
  return cachemissprof_.size();
}
inline void CacheRWGroupMissProf::clear_cachemissprof() {
  cachemissprof_.Clear();
}
inline const ::MaxSimInterface::CacheMissProf& CacheRWGroupMissProf::cachemissprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.CacheRWGroupMissProf.cacheMissProf)
  return cachemissprof_.Get(index);
}
inline ::MaxSimInterface::CacheMissProf* CacheRWGroupMissProf::mutable_cachemissprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.CacheRWGroupMissProf.cacheMissProf)
  return cachemissprof_.Mutable(index);
}
inline ::MaxSimInterface::CacheMissProf* CacheRWGroupMissProf::add_cachemissprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.CacheRWGroupMissProf.cacheMissProf)
  return cachemissprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheMissProf >&
CacheRWGroupMissProf::cachemissprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.CacheRWGroupMissProf.cacheMissProf)
  return cachemissprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheMissProf >*
CacheRWGroupMissProf::mutable_cachemissprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.CacheRWGroupMissProf.cacheMissProf)
  return &cachemissprof_;
}

// -------------------------------------------------------------------

// AllocSiteProf

// required int32 id = 1;
inline bool AllocSiteProf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocSiteProf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocSiteProf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocSiteProf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllocSiteProf::id() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocSiteProf.id)
  return id_;
}
inline void AllocSiteProf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocSiteProf.id)
}

// required int64 IP = 2;
inline bool AllocSiteProf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllocSiteProf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllocSiteProf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllocSiteProf::clear_ip() {
  ip_ = GOOGLE_LONGLONG(0);
  clear_has_ip();
}
inline ::google::protobuf::int64 AllocSiteProf::ip() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocSiteProf.IP)
  return ip_;
}
inline void AllocSiteProf::set_ip(::google::protobuf::int64 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocSiteProf.IP)
}

// required int32 classId = 3;
inline bool AllocSiteProf::has_classid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllocSiteProf::set_has_classid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllocSiteProf::clear_has_classid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllocSiteProf::clear_classid() {
  classid_ = 0;
  clear_has_classid();
}
inline ::google::protobuf::int32 AllocSiteProf::classid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocSiteProf.classId)
  return classid_;
}
inline void AllocSiteProf::set_classid(::google::protobuf::int32 value) {
  set_has_classid();
  classid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocSiteProf.classId)
}

// required int64 count = 4;
inline bool AllocSiteProf::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllocSiteProf::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllocSiteProf::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllocSiteProf::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 AllocSiteProf::count() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.AllocSiteProf.count)
  return count_;
}
inline void AllocSiteProf::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.AllocSiteProf.count)
}

// -------------------------------------------------------------------

// FieldProf

// required int32 offset = 1;
inline bool FieldProf::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldProf::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldProf::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldProf::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 FieldProf::offset() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldProf.offset)
  return offset_;
}
inline void FieldProf::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldProf.offset)
}

// required int64 readCount = 2;
inline bool FieldProf::has_readcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldProf::set_has_readcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldProf::clear_has_readcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldProf::clear_readcount() {
  readcount_ = GOOGLE_LONGLONG(0);
  clear_has_readcount();
}
inline ::google::protobuf::int64 FieldProf::readcount() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldProf.readCount)
  return readcount_;
}
inline void FieldProf::set_readcount(::google::protobuf::int64 value) {
  set_has_readcount();
  readcount_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldProf.readCount)
}

// required int64 writeCount = 3;
inline bool FieldProf::has_writecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldProf::set_has_writecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldProf::clear_has_writecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldProf::clear_writecount() {
  writecount_ = GOOGLE_LONGLONG(0);
  clear_has_writecount();
}
inline ::google::protobuf::int64 FieldProf::writecount() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldProf.writeCount)
  return writecount_;
}
inline void FieldProf::set_writecount(::google::protobuf::int64 value) {
  set_has_writecount();
  writecount_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldProf.writeCount)
}

// repeated int64 cacheRWGroupMissCount = 4;
inline int FieldProf::cacherwgroupmisscount_size() const {
  return cacherwgroupmisscount_.size();
}
inline void FieldProf::clear_cacherwgroupmisscount() {
  cacherwgroupmisscount_.Clear();
}
inline ::google::protobuf::int64 FieldProf::cacherwgroupmisscount(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.FieldProf.cacheRWGroupMissCount)
  return cacherwgroupmisscount_.Get(index);
}
inline void FieldProf::set_cacherwgroupmisscount(int index, ::google::protobuf::int64 value) {
  cacherwgroupmisscount_.Set(index, value);
  // @@protoc_insertion_point(field_set:MaxSimInterface.FieldProf.cacheRWGroupMissCount)
}
inline void FieldProf::add_cacherwgroupmisscount(::google::protobuf::int64 value) {
  cacherwgroupmisscount_.Add(value);
  // @@protoc_insertion_point(field_add:MaxSimInterface.FieldProf.cacheRWGroupMissCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FieldProf::cacherwgroupmisscount() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.FieldProf.cacheRWGroupMissCount)
  return cacherwgroupmisscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FieldProf::mutable_cacherwgroupmisscount() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.FieldProf.cacheRWGroupMissCount)
  return &cacherwgroupmisscount_;
}

// -------------------------------------------------------------------

// ClassProf

// required int32 id = 1;
inline bool ClassProf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassProf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassProf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassProf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClassProf::id() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.id)
  return id_;
}
inline void ClassProf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassProf.id)
}

// repeated .MaxSimInterface.AllocProf allocProf = 2;
inline int ClassProf::allocprof_size() const {
  return allocprof_.size();
}
inline void ClassProf::clear_allocprof() {
  allocprof_.Clear();
}
inline const ::MaxSimInterface::AllocProf& ClassProf::allocprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.allocProf)
  return allocprof_.Get(index);
}
inline ::MaxSimInterface::AllocProf* ClassProf::mutable_allocprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ClassProf.allocProf)
  return allocprof_.Mutable(index);
}
inline ::MaxSimInterface::AllocProf* ClassProf::add_allocprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ClassProf.allocProf)
  return allocprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocProf >&
ClassProf::allocprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ClassProf.allocProf)
  return allocprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocProf >*
ClassProf::mutable_allocprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ClassProf.allocProf)
  return &allocprof_;
}

// repeated .MaxSimInterface.FieldProf fieldProf = 3;
inline int ClassProf::fieldprof_size() const {
  return fieldprof_.size();
}
inline void ClassProf::clear_fieldprof() {
  fieldprof_.Clear();
}
inline const ::MaxSimInterface::FieldProf& ClassProf::fieldprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.fieldProf)
  return fieldprof_.Get(index);
}
inline ::MaxSimInterface::FieldProf* ClassProf::mutable_fieldprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ClassProf.fieldProf)
  return fieldprof_.Mutable(index);
}
inline ::MaxSimInterface::FieldProf* ClassProf::add_fieldprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ClassProf.fieldProf)
  return fieldprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldProf >&
ClassProf::fieldprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ClassProf.fieldProf)
  return fieldprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::FieldProf >*
ClassProf::mutable_fieldprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ClassProf.fieldProf)
  return &fieldprof_;
}

// required int64 memAllSize = 4;
inline bool ClassProf::has_memallsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClassProf::set_has_memallsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClassProf::clear_has_memallsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClassProf::clear_memallsize() {
  memallsize_ = GOOGLE_LONGLONG(0);
  clear_has_memallsize();
}
inline ::google::protobuf::int64 ClassProf::memallsize() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.memAllSize)
  return memallsize_;
}
inline void ClassProf::set_memallsize(::google::protobuf::int64 value) {
  set_has_memallsize();
  memallsize_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassProf.memAllSize)
}

// required int64 memAllCount = 5;
inline bool ClassProf::has_memallcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClassProf::set_has_memallcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClassProf::clear_has_memallcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClassProf::clear_memallcount() {
  memallcount_ = GOOGLE_LONGLONG(0);
  clear_has_memallcount();
}
inline ::google::protobuf::int64 ClassProf::memallcount() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.memAllCount)
  return memallcount_;
}
inline void ClassProf::set_memallcount(::google::protobuf::int64 value) {
  set_has_memallcount();
  memallcount_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassProf.memAllCount)
}

// required int64 memAccCount = 6;
inline bool ClassProf::has_memacccount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClassProf::set_has_memacccount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClassProf::clear_has_memacccount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClassProf::clear_memacccount() {
  memacccount_ = GOOGLE_LONGLONG(0);
  clear_has_memacccount();
}
inline ::google::protobuf::int64 ClassProf::memacccount() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ClassProf.memAccCount)
  return memacccount_;
}
inline void ClassProf::set_memacccount(::google::protobuf::int64 value) {
  set_has_memacccount();
  memacccount_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ClassProf.memAccCount)
}

// -------------------------------------------------------------------

// ZSimProfDB

// required int32 maxAllocSiteProfId = 1;
inline bool ZSimProfDB::has_maxallocsiteprofid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZSimProfDB::set_has_maxallocsiteprofid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZSimProfDB::clear_has_maxallocsiteprofid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZSimProfDB::clear_maxallocsiteprofid() {
  maxallocsiteprofid_ = 0;
  clear_has_maxallocsiteprofid();
}
inline ::google::protobuf::int32 ZSimProfDB::maxallocsiteprofid() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.maxAllocSiteProfId)
  return maxallocsiteprofid_;
}
inline void ZSimProfDB::set_maxallocsiteprofid(::google::protobuf::int32 value) {
  set_has_maxallocsiteprofid();
  maxallocsiteprofid_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ZSimProfDB.maxAllocSiteProfId)
}

// required int32 dumpEventualStatsBeg = 2;
inline bool ZSimProfDB::has_dumpeventualstatsbeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZSimProfDB::set_has_dumpeventualstatsbeg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZSimProfDB::clear_has_dumpeventualstatsbeg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZSimProfDB::clear_dumpeventualstatsbeg() {
  dumpeventualstatsbeg_ = 0;
  clear_has_dumpeventualstatsbeg();
}
inline ::google::protobuf::int32 ZSimProfDB::dumpeventualstatsbeg() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.dumpEventualStatsBeg)
  return dumpeventualstatsbeg_;
}
inline void ZSimProfDB::set_dumpeventualstatsbeg(::google::protobuf::int32 value) {
  set_has_dumpeventualstatsbeg();
  dumpeventualstatsbeg_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ZSimProfDB.dumpEventualStatsBeg)
}

// required int32 dumpEventualStatsEnd = 3;
inline bool ZSimProfDB::has_dumpeventualstatsend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZSimProfDB::set_has_dumpeventualstatsend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZSimProfDB::clear_has_dumpeventualstatsend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZSimProfDB::clear_dumpeventualstatsend() {
  dumpeventualstatsend_ = 0;
  clear_has_dumpeventualstatsend();
}
inline ::google::protobuf::int32 ZSimProfDB::dumpeventualstatsend() const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.dumpEventualStatsEnd)
  return dumpeventualstatsend_;
}
inline void ZSimProfDB::set_dumpeventualstatsend(::google::protobuf::int32 value) {
  set_has_dumpeventualstatsend();
  dumpeventualstatsend_ = value;
  // @@protoc_insertion_point(field_set:MaxSimInterface.ZSimProfDB.dumpEventualStatsEnd)
}

// repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
inline int ZSimProfDB::cacherwgroupinfo_size() const {
  return cacherwgroupinfo_.size();
}
inline void ZSimProfDB::clear_cacherwgroupinfo() {
  cacherwgroupinfo_.Clear();
}
inline const ::MaxSimInterface::CacheRWGroupInfo& ZSimProfDB::cacherwgroupinfo(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.cacheRWGroupInfo)
  return cacherwgroupinfo_.Get(index);
}
inline ::MaxSimInterface::CacheRWGroupInfo* ZSimProfDB::mutable_cacherwgroupinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ZSimProfDB.cacheRWGroupInfo)
  return cacherwgroupinfo_.Mutable(index);
}
inline ::MaxSimInterface::CacheRWGroupInfo* ZSimProfDB::add_cacherwgroupinfo() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ZSimProfDB.cacheRWGroupInfo)
  return cacherwgroupinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupInfo >&
ZSimProfDB::cacherwgroupinfo() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ZSimProfDB.cacheRWGroupInfo)
  return cacherwgroupinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupInfo >*
ZSimProfDB::mutable_cacherwgroupinfo() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ZSimProfDB.cacheRWGroupInfo)
  return &cacherwgroupinfo_;
}

// repeated .MaxSimInterface.ClassProf classProf = 5;
inline int ZSimProfDB::classprof_size() const {
  return classprof_.size();
}
inline void ZSimProfDB::clear_classprof() {
  classprof_.Clear();
}
inline const ::MaxSimInterface::ClassProf& ZSimProfDB::classprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.classProf)
  return classprof_.Get(index);
}
inline ::MaxSimInterface::ClassProf* ZSimProfDB::mutable_classprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ZSimProfDB.classProf)
  return classprof_.Mutable(index);
}
inline ::MaxSimInterface::ClassProf* ZSimProfDB::add_classprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ZSimProfDB.classProf)
  return classprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassProf >&
ZSimProfDB::classprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ZSimProfDB.classProf)
  return classprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::ClassProf >*
ZSimProfDB::mutable_classprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ZSimProfDB.classProf)
  return &classprof_;
}

// repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
inline int ZSimProfDB::cacherwgroupmissprof_size() const {
  return cacherwgroupmissprof_.size();
}
inline void ZSimProfDB::clear_cacherwgroupmissprof() {
  cacherwgroupmissprof_.Clear();
}
inline const ::MaxSimInterface::CacheRWGroupMissProf& ZSimProfDB::cacherwgroupmissprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.cacheRWGroupMissProf)
  return cacherwgroupmissprof_.Get(index);
}
inline ::MaxSimInterface::CacheRWGroupMissProf* ZSimProfDB::mutable_cacherwgroupmissprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ZSimProfDB.cacheRWGroupMissProf)
  return cacherwgroupmissprof_.Mutable(index);
}
inline ::MaxSimInterface::CacheRWGroupMissProf* ZSimProfDB::add_cacherwgroupmissprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ZSimProfDB.cacheRWGroupMissProf)
  return cacherwgroupmissprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupMissProf >&
ZSimProfDB::cacherwgroupmissprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ZSimProfDB.cacheRWGroupMissProf)
  return cacherwgroupmissprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::CacheRWGroupMissProf >*
ZSimProfDB::mutable_cacherwgroupmissprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ZSimProfDB.cacheRWGroupMissProf)
  return &cacherwgroupmissprof_;
}

// repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
inline int ZSimProfDB::allocsiteprof_size() const {
  return allocsiteprof_.size();
}
inline void ZSimProfDB::clear_allocsiteprof() {
  allocsiteprof_.Clear();
}
inline const ::MaxSimInterface::AllocSiteProf& ZSimProfDB::allocsiteprof(int index) const {
  // @@protoc_insertion_point(field_get:MaxSimInterface.ZSimProfDB.allocSiteProf)
  return allocsiteprof_.Get(index);
}
inline ::MaxSimInterface::AllocSiteProf* ZSimProfDB::mutable_allocsiteprof(int index) {
  // @@protoc_insertion_point(field_mutable:MaxSimInterface.ZSimProfDB.allocSiteProf)
  return allocsiteprof_.Mutable(index);
}
inline ::MaxSimInterface::AllocSiteProf* ZSimProfDB::add_allocsiteprof() {
  // @@protoc_insertion_point(field_add:MaxSimInterface.ZSimProfDB.allocSiteProf)
  return allocsiteprof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocSiteProf >&
ZSimProfDB::allocsiteprof() const {
  // @@protoc_insertion_point(field_list:MaxSimInterface.ZSimProfDB.allocSiteProf)
  return allocsiteprof_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxSimInterface::AllocSiteProf >*
ZSimProfDB::mutable_allocsiteprof() {
  // @@protoc_insertion_point(field_mutable_list:MaxSimInterface.ZSimProfDB.allocSiteProf)
  return &allocsiteprof_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxSimInterface

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MaxSimInterface::MethodInfo_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::MethodInfo_Kind>() {
  return ::MaxSimInterface::MethodInfo_Kind_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::FieldInfo_Property> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::FieldInfo_Property>() {
  return ::MaxSimInterface::FieldInfo_Property_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::ClassInfo_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::ClassInfo_Kind>() {
  return ::MaxSimInterface::ClassInfo_Kind_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::PointerTaggingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::PointerTaggingType>() {
  return ::MaxSimInterface::PointerTaggingType_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::ZSimMagicOpcodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::ZSimMagicOpcodes>() {
  return ::MaxSimInterface::ZSimMagicOpcodes_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::MaxSimMagicOpcodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::MaxSimMagicOpcodes>() {
  return ::MaxSimInterface::MaxSimMagicOpcodes_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::MaxSimMagicOpPackedArgsOffsets> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::MaxSimMagicOpPackedArgsOffsets>() {
  return ::MaxSimInterface::MaxSimMagicOpPackedArgsOffsets_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::AddressRangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::AddressRangeType>() {
  return ::MaxSimInterface::AddressRangeType_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::MaxineVMOperationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::MaxineVMOperationMode>() {
  return ::MaxSimInterface::MaxineVMOperationMode_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::HubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::HubType>() {
  return ::MaxSimInterface::HubType_descriptor();
}
template <> struct is_proto_enum< ::MaxSimInterface::PointerTag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MaxSimInterface::PointerTag>() {
  return ::MaxSimInterface::PointerTag_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // __cplusplus
#endif  // PROTOBUF_MaxSimInterface_2eproto__INCLUDED
