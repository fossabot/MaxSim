// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaxSimInterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MaxSimInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MaxSimInterface {

namespace {

const ::google::protobuf::Descriptor* MaxSimConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxSimConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldOffsetRemapPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldOffsetRemapPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTransInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTransInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTransDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTransDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffsetBCIPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffsetBCIPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MethodInfo_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldInfo_Property_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClassInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClassInfo_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MaxineInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxineInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheMissProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheMissProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheRWGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheRWGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheRWGroupMissProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheRWGroupMissProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocSiteProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocSiteProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassProf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassProf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZSimProfDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZSimProfDB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PointerTaggingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZSimMagicOpcodes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MaxSimMagicOpcodes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MaxSimMagicOpPackedArgsOffsets_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddressRangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MaxineVMOperationMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PointerTag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MaxSimInterface_2eproto() {
  protobuf_AddDesc_MaxSimInterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MaxSimInterface.proto");
  GOOGLE_CHECK(file != NULL);
  MaxSimConfig_descriptor_ = file->message_type(0);
  static const int MaxSimConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, ismaxsimenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, pointertaggingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, layoutscalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, layoutscalereffactor_),
  };
  MaxSimConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxSimConfig_descriptor_,
      MaxSimConfig::default_instance_,
      MaxSimConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSimConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxSimConfig));
  FieldOffsetRemapPair_descriptor_ = file->message_type(1);
  static const int FieldOffsetRemapPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOffsetRemapPair, fromoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOffsetRemapPair, tooffset_),
  };
  FieldOffsetRemapPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldOffsetRemapPair_descriptor_,
      FieldOffsetRemapPair::default_instance_,
      FieldOffsetRemapPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOffsetRemapPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOffsetRemapPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldOffsetRemapPair));
  DataTransInfo_descriptor_ = file->message_type(2);
  static const int DataTransInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransInfo, typedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransInfo, transtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransInfo, fieldoffsetremappairs_),
  };
  DataTransInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTransInfo_descriptor_,
      DataTransInfo::default_instance_,
      DataTransInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTransInfo));
  DataTransDB_descriptor_ = file->message_type(3);
  static const int DataTransDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransDB, datatransinfo_),
  };
  DataTransDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTransDB_descriptor_,
      DataTransDB::default_instance_,
      DataTransDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTransDB));
  OffsetBCIPair_descriptor_ = file->message_type(4);
  static const int OffsetBCIPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetBCIPair, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetBCIPair, bci_),
  };
  OffsetBCIPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffsetBCIPair_descriptor_,
      OffsetBCIPair::default_instance_,
      OffsetBCIPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetBCIPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetBCIPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffsetBCIPair));
  MethodInfo_descriptor_ = file->message_type(5);
  static const int MethodInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, beginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, offsetbcipair_),
  };
  MethodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MethodInfo_descriptor_,
      MethodInfo::default_instance_,
      MethodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MethodInfo));
  MethodInfo_Kind_descriptor_ = MethodInfo_descriptor_->enum_type(0);
  FieldInfo_descriptor_ = file->message_type(6);
  static const int FieldInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, property_),
  };
  FieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldInfo_descriptor_,
      FieldInfo::default_instance_,
      FieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldInfo));
  FieldInfo_Property_descriptor_ = FieldInfo_descriptor_->enum_type(0);
  ClassInfo_descriptor_ = file->message_type(7);
  static const int ClassInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, fieldinfo_),
  };
  ClassInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassInfo_descriptor_,
      ClassInfo::default_instance_,
      ClassInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassInfo));
  ClassInfo_Kind_descriptor_ = ClassInfo_descriptor_->enum_type(0);
  MaxineInfoDB_descriptor_ = file->message_type(8);
  static const int MaxineInfoDB_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, maxclassinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, classinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, methodinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, bootcodereginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, maxsimconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, nullcheckoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, datatransinfo_),
  };
  MaxineInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxineInfoDB_descriptor_,
      MaxineInfoDB::default_instance_,
      MaxineInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxineInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxineInfoDB));
  AllocProf_descriptor_ = file->message_type(9);
  static const int AllocProf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocProf, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocProf, count_),
  };
  AllocProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocProf_descriptor_,
      AllocProf::default_instance_,
      AllocProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocProf));
  CacheMissProf_descriptor_ = file->message_type(10);
  static const int CacheMissProf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, offsetlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, offsethi_),
  };
  CacheMissProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheMissProf_descriptor_,
      CacheMissProf::default_instance_,
      CacheMissProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheMissProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheMissProf));
  CacheRWGroupInfo_descriptor_ = file->message_type(11);
  static const int CacheRWGroupInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, cacherwgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, cachegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, cachegroupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, iswrite_),
  };
  CacheRWGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheRWGroupInfo_descriptor_,
      CacheRWGroupInfo::default_instance_,
      CacheRWGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheRWGroupInfo));
  CacheRWGroupMissProf_descriptor_ = file->message_type(12);
  static const int CacheRWGroupMissProf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupMissProf, cachemissprof_),
  };
  CacheRWGroupMissProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheRWGroupMissProf_descriptor_,
      CacheRWGroupMissProf::default_instance_,
      CacheRWGroupMissProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupMissProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheRWGroupMissProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheRWGroupMissProf));
  AllocSiteProf_descriptor_ = file->message_type(13);
  static const int AllocSiteProf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, count_),
  };
  AllocSiteProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocSiteProf_descriptor_,
      AllocSiteProf::default_instance_,
      AllocSiteProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocSiteProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocSiteProf));
  FieldProf_descriptor_ = file->message_type(14);
  static const int FieldProf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, readcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, writecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, cacherwgroupmisscount_),
  };
  FieldProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldProf_descriptor_,
      FieldProf::default_instance_,
      FieldProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldProf));
  ClassProf_descriptor_ = file->message_type(15);
  static const int ClassProf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, allocprof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, fieldprof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, memallsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, memallcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, memacccount_),
  };
  ClassProf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassProf_descriptor_,
      ClassProf::default_instance_,
      ClassProf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassProf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassProf));
  ZSimProfDB_descriptor_ = file->message_type(16);
  static const int ZSimProfDB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, maxallocsiteprofid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, dumpeventualstatsbeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, dumpeventualstatsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, cacherwgroupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, classprof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, cacherwgroupmissprof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, allocsiteprof_),
  };
  ZSimProfDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZSimProfDB_descriptor_,
      ZSimProfDB::default_instance_,
      ZSimProfDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZSimProfDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZSimProfDB));
  PointerTaggingType_descriptor_ = file->enum_type(0);
  ZSimMagicOpcodes_descriptor_ = file->enum_type(1);
  MaxSimMagicOpcodes_descriptor_ = file->enum_type(2);
  MaxSimMagicOpPackedArgsOffsets_descriptor_ = file->enum_type(3);
  AddressRangeType_descriptor_ = file->enum_type(4);
  MaxineVMOperationMode_descriptor_ = file->enum_type(5);
  HubType_descriptor_ = file->enum_type(6);
  PointerTag_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MaxSimInterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxSimConfig_descriptor_, &MaxSimConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldOffsetRemapPair_descriptor_, &FieldOffsetRemapPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTransInfo_descriptor_, &DataTransInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTransDB_descriptor_, &DataTransDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffsetBCIPair_descriptor_, &OffsetBCIPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodInfo_descriptor_, &MethodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldInfo_descriptor_, &FieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassInfo_descriptor_, &ClassInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxineInfoDB_descriptor_, &MaxineInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocProf_descriptor_, &AllocProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheMissProf_descriptor_, &CacheMissProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheRWGroupInfo_descriptor_, &CacheRWGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheRWGroupMissProf_descriptor_, &CacheRWGroupMissProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocSiteProf_descriptor_, &AllocSiteProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldProf_descriptor_, &FieldProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassProf_descriptor_, &ClassProf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZSimProfDB_descriptor_, &ZSimProfDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MaxSimInterface_2eproto() {
  delete MaxSimConfig::default_instance_;
  delete MaxSimConfig_reflection_;
  delete FieldOffsetRemapPair::default_instance_;
  delete FieldOffsetRemapPair_reflection_;
  delete DataTransInfo::default_instance_;
  delete DataTransInfo_reflection_;
  delete DataTransDB::default_instance_;
  delete DataTransDB_reflection_;
  delete OffsetBCIPair::default_instance_;
  delete OffsetBCIPair_reflection_;
  delete MethodInfo::default_instance_;
  delete MethodInfo_reflection_;
  delete FieldInfo::default_instance_;
  delete FieldInfo_reflection_;
  delete ClassInfo::default_instance_;
  delete ClassInfo_reflection_;
  delete MaxineInfoDB::default_instance_;
  delete MaxineInfoDB_reflection_;
  delete AllocProf::default_instance_;
  delete AllocProf_reflection_;
  delete CacheMissProf::default_instance_;
  delete CacheMissProf_reflection_;
  delete CacheRWGroupInfo::default_instance_;
  delete CacheRWGroupInfo_reflection_;
  delete CacheRWGroupMissProf::default_instance_;
  delete CacheRWGroupMissProf_reflection_;
  delete AllocSiteProf::default_instance_;
  delete AllocSiteProf_reflection_;
  delete FieldProf::default_instance_;
  delete FieldProf_reflection_;
  delete ClassProf::default_instance_;
  delete ClassProf_reflection_;
  delete ZSimProfDB::default_instance_;
  delete ZSimProfDB_reflection_;
}

void protobuf_AddDesc_MaxSimInterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MaxSimInterface.proto\022\017MaxSimInterface"
    "\"\277\001\n\014MaxSimConfig\022\035\n\017isMaxSimEnabled\030\001 \001"
    "(\010:\004true\022Q\n\022pointerTaggingType\030\002 \001(\0162#.M"
    "axSimInterface.PointerTaggingType:\020CLASS"
    "_ID_TAGGING\022\034\n\021layoutScaleFactor\030\003 \001(\005:\001"
    "1\022\037\n\024layoutScaleRefFactor\030\004 \001(\005:\0011\"<\n\024Fi"
    "eldOffsetRemapPair\022\022\n\nfromOffset\030\001 \002(\005\022\020"
    "\n\010toOffset\030\002 \002(\005\"y\n\rDataTransInfo\022\020\n\010typ"
    "eDesc\030\001 \002(\t\022\020\n\010transTag\030\002 \001(\005\022D\n\025fieldOf"
    "fsetRemapPairs\030\003 \003(\0132%.MaxSimInterface.F"
    "ieldOffsetRemapPair\"D\n\013DataTransDB\0225\n\rda"
    "taTransInfo\030\001 \003(\0132\036.MaxSimInterface.Data"
    "TransInfo\",\n\rOffsetBCIPair\022\016\n\006offset\030\001 \002"
    "(\005\022\013\n\003BCI\030\002 \002(\005\"\372\001\n\nMethodInfo\022\014\n\004name\030\001"
    " \002(\t\022\017\n\007beginIP\030\002 \002(\003\022\014\n\004size\030\003 \002(\003\022\014\n\004d"
    "esc\030\004 \001(\t\022\017\n\007classId\030\005 \001(\005\022.\n\004kind\030\006 \001(\016"
    "2 .MaxSimInterface.MethodInfo.Kind\0225\n\rof"
    "fsetBCIPair\030\007 \003(\0132\036.MaxSimInterface.Offs"
    "etBCIPair\"9\n\004Kind\022\r\n\tOPTIMIZED\020\000\022\010\n\004BOOT"
    "\020\001\022\014\n\010BASELINE\020\002\022\n\n\006NATIVE\020\003\"\210\001\n\tFieldIn"
    "fo\022\014\n\004name\030\001 \002(\t\022\017\n\007classId\030\002 \002(\005\022\016\n\006off"
    "set\030\003 \002(\005\0225\n\010property\030\004 \003(\0162#.MaxSimInte"
    "rface.FieldInfo.Property\"\025\n\010Property\022\t\n\005"
    "FINAL\020\000\"\334\001\n\tClassInfo\022\014\n\004desc\030\001 \002(\t\022\n\n\002i"
    "d\030\002 \002(\005\022-\n\004kind\030\003 \002(\0162\037.MaxSimInterface."
    "ClassInfo.Kind\022\023\n\013componentId\030\004 \001(\005\022-\n\tf"
    "ieldInfo\030\005 \003(\0132\032.MaxSimInterface.FieldIn"
    "fo\"B\n\004Kind\022\t\n\005TUPLE\020\000\022\t\n\005ARRAY\020\001\022\r\n\tPRIM"
    "ITIVE\020\002\022\n\n\006HYBRID\020\003\022\t\n\005OTHER\020\004\"\316\002\n\014Maxin"
    "eInfoDB\022\013\n\003key\030\001 \001(\003\022\026\n\016maxClassInfoId\030\002"
    " \002(\005\022-\n\tclassInfo\030\003 \003(\0132\032.MaxSimInterfac"
    "e.ClassInfo\022/\n\nmethodInfo\030\004 \003(\0132\033.MaxSim"
    "Interface.MethodInfo\0224\n\017bootCodeRegInfo\030"
    "\005 \002(\0132\033.MaxSimInterface.MethodInfo\0223\n\014Ma"
    "xSimConfig\030\006 \002(\0132\035.MaxSimInterface.MaxSi"
    "mConfig\022\027\n\017nullCheckOffset\030\007 \002(\005\0225\n\rdata"
    "TransInfo\030\010 \003(\0132\036.MaxSimInterface.DataTr"
    "ansInfo\"(\n\tAllocProf\022\014\n\004size\030\001 \002(\005\022\r\n\005co"
    "unt\030\002 \002(\003\"_\n\rCacheMissProf\022\r\n\005count\030\001 \002("
    "\003\022\n\n\002IP\030\002 \002(\003\022\017\n\007classId\030\003 \002(\005\022\020\n\010offset"
    "Lo\030\004 \002(\005\022\020\n\010offsetHi\030\005 \002(\005\"i\n\020CacheRWGro"
    "upInfo\022\026\n\016cacheRWGroupId\030\001 \002(\005\022\024\n\014cacheG"
    "roupId\030\002 \002(\005\022\026\n\016cacheGroupName\030\003 \002(\t\022\017\n\007"
    "isWrite\030\004 \002(\010\"M\n\024CacheRWGroupMissProf\0225\n"
    "\rcacheMissProf\030\001 \003(\0132\036.MaxSimInterface.C"
    "acheMissProf\"G\n\rAllocSiteProf\022\n\n\002id\030\001 \002("
    "\005\022\n\n\002IP\030\002 \002(\003\022\017\n\007classId\030\003 \002(\005\022\r\n\005count\030"
    "\004 \002(\003\"a\n\tFieldProf\022\016\n\006offset\030\001 \002(\005\022\021\n\tre"
    "adCount\030\002 \002(\003\022\022\n\nwriteCount\030\003 \002(\003\022\035\n\025cac"
    "heRWGroupMissCount\030\004 \003(\003\"\263\001\n\tClassProf\022\n"
    "\n\002id\030\001 \002(\005\022-\n\tallocProf\030\002 \003(\0132\032.MaxSimIn"
    "terface.AllocProf\022-\n\tfieldProf\030\003 \003(\0132\032.M"
    "axSimInterface.FieldProf\022\022\n\nmemAllSize\030\004"
    " \002(\003\022\023\n\013memAllCount\030\005 \002(\003\022\023\n\013memAccCount"
    "\030\006 \002(\003\"\314\002\n\nZSimProfDB\022\032\n\022maxAllocSitePro"
    "fId\030\001 \002(\005\022\034\n\024dumpEventualStatsBeg\030\002 \002(\005\022"
    "\034\n\024dumpEventualStatsEnd\030\003 \002(\005\022;\n\020cacheRW"
    "GroupInfo\030\004 \003(\0132!.MaxSimInterface.CacheR"
    "WGroupInfo\022-\n\tclassProf\030\005 \003(\0132\032.MaxSimIn"
    "terface.ClassProf\022C\n\024cacheRWGroupMissPro"
    "f\030\006 \003(\0132%.MaxSimInterface.CacheRWGroupMi"
    "ssProf\0225\n\rallocSiteProf\030\007 \003(\0132\036.MaxSimIn"
    "terface.AllocSiteProf*l\n\022PointerTaggingT"
    "ype\022\016\n\nNO_TAGGING\020\000\022\024\n\020CLASS_ID_TAGGING\020"
    "\001\022\031\n\025ALLOC_SITE_ID_TAGGING\020\002\022\025\n\021UNDEFINE"
    "D_TAGGING\020\003*w\n\020ZSimMagicOpcodes\022\022\n\rZSIM_"
    "M_OPC_LO\020\201\010\022\031\n\024ZSIM_M_OPC_ROI_BEGIN\020\201\010\022\027"
    "\n\022ZSIM_M_OPC_ROI_END\020\202\010\022\027\n\022ZSIM_M_OPC_ZS"
    "IM_HI\020\211\010\032\002\020\001*\210\006\n\022MaxSimMagicOpcodes\022\024\n\017M"
    "AXSIM_M_OPC_LO\020\315\010\022.\n)MAXSIM_M_OPC_GET_AV"
    "AILABLE_PROCESSORS_NUM\020\315\010\022#\n\036MAXSIM_M_OP"
    "C_REPORT_HUB_OFFSET\020\316\010\022(\n#MAXSIM_M_OPC_R"
    "EPORT_HUB_TYPE_OFFSET\020\317\010\0220\n+MAXSIM_M_OPC"
    "_REPORT_ARRAY_FIRST_ELEM_OFFSET\020\320\010\022(\n#MA"
    "XSIM_M_OPC_REGISTER_ADDRESS_RANGE\020\321\010\022*\n%"
    "MAXSIM_M_OPC_DEREGISTER_ADDRESS_RANGE\020\322\010"
    "\0223\n.MAXSIM_M_OPC_GET_ALLOCATION_SITE_EST"
    "IMATION_ID\020\323\010\022+\n&MAXSIM_M_OPC_PROFILE_OB"
    "JECT_ALLOCATION\020\324\010\022+\n&MAXSIM_M_OPC_ENABL"
    "E_PROFILE_COLLECTION\020\325\010\022,\n\'MAXSIM_M_OPC_"
    "DISABLE_PROFILE_COLLECTION\020\326\010\022*\n%MAXSIM_"
    "M_OPC_RESET_PROFILE_COLLECTION\020\327\010\022\'\n\"MAX"
    "SIM_M_OPC_PRINT_PROFILE_TO_FILE\020\330\010\022%\n MA"
    "XSIM_M_OPC_DUMP_EVENTUAL_STATS\020\331\010\022#\n\036MAX"
    "SIM_M_OPC_FILTER_LOOP_BEGIN\020\332\010\022!\n\034MAXSIM"
    "_M_OPC_FILTER_LOOP_END\020\333\010\022:\n5MAXSIM_M_OP"
    "C_ACTIVATE_DATA_TRANS_VIA_ADDR_SPACE_MOR"
    "PH\020\334\010\022\024\n\017MAXSIM_M_OPC_HI\020\260\t\032\002\020\001*\325\001\n\036MaxS"
    "imMagicOpPackedArgsOffsets\0228\n4MAXSIM_M_O"
    "P_PROFILE_OBJECT_ALLOCATION_P_ARG_SIZE_O"
    "FF\020\000\022<\n8MAXSIM_M_OP_PROFILE_OBJECT_ALLOC"
    "ATION_P_ARG_TAG_TYPE_OFF\020 \0227\n3MAXSIM_M_O"
    "P_PROFILE_OBJECT_ALLOCATION_P_ARG_TAG_OF"
    "F\0200\032\002\020\001*\226\002\n\020AddressRangeType\022\027\n\023STACK_AD"
    "DRESS_RANGE\020\000\022\025\n\021TLS_ADDRESS_RANGE\020\001\022\026\n\022"
    "HEAP_ADDRESS_RANGE\020\002\022\026\n\022CODE_ADDRESS_RAN"
    "GE\020\003\022\030\n\024NATIVE_ADDRESS_RANGE\020\004\022 \n\034ARRAY_"
    "CRITICAL_ADDRESS_RANGE\020\005\022%\n!ALLOCATION_F"
    "RONTIER_ADDRESS_RANGE\020\006\022\"\n\036PROTOBUF_MESS"
    "AGE_ADDRESS_RANGE\020\007\022\033\n\027UNDEFINED_ADDRESS"
    "_RANGE\020\010*\266\001\n\025MaxineVMOperationMode\022$\n MA"
    "XINE_VM_OPERATION_MODE_UNKNOWN\020\000\022+\n\'MAXI"
    "NE_VM_OPERATION_MODE_RUNNING_NON_GC\020\001\022\'\n"
    "#MAXINE_VM_OPERATION_MODE_RUNNING_GC\020\002\022!"
    "\n\035MAXINE_VM_OPERATION_MODE_SAME\020\003*u\n\007Hub"
    "Type\022\022\n\016HUB_TYPE_TUPLE\020\000\022 \n\034HUB_TYPE_ARR"
    "AY_OF_REFERENCES\020\001\022 \n\034HUB_TYPE_ARRAY_OF_"
    "PRIMITIVES\020\002\022\022\n\016HUB_TYPE_UNDEF\020\003*\370\002\n\nPoi"
    "nterTag\022\035\n\020TAG_AGGREGATE_LO\020\377\377\377\377\377\377\377\377\377\001\022\032"
    "\n\rTAG_UNDEFINED\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013TAG_FETCHE"
    "S\020\000\022\014\n\010TAG_CODE\020\001\022\014\n\010TAG_HEAP\020\002\022\r\n\tTAG_S"
    "TACK\020\003\022\013\n\007TAG_TLS\020\004\022\016\n\nTAG_NATIVE\020\005\022\016\n\nT"
    "AG_STATIC\020\006\022\024\n\020TAG_UNDEFINED_GP\020\007\022\024\n\020TAG"
    "_AGGREGATE_HI\020\007\022\023\n\017TAG_RESERVED_LO\020\010\022\023\n\017"
    "TAG_RESERVED_HI\020\n\022\031\n\025TAG_TRANSFORMATION_"
    "LO\020\013\022\031\n\025TAG_TRANSFORMATION_HI\020\017\022\r\n\tTAG_G"
    "P_LO\020\020\022\017\n\tTAG_GP_HI\020\376\377\003\022\026\n\020DEFINED_TAGS_"
    "NUM\020\377\377\003\032\002\020\001B(\n\025com.sun.max.vm.maxsimB\017Ma"
    "xSimInterface", 4733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MaxSimInterface.proto", &protobuf_RegisterTypes);
  MaxSimConfig::default_instance_ = new MaxSimConfig();
  FieldOffsetRemapPair::default_instance_ = new FieldOffsetRemapPair();
  DataTransInfo::default_instance_ = new DataTransInfo();
  DataTransDB::default_instance_ = new DataTransDB();
  OffsetBCIPair::default_instance_ = new OffsetBCIPair();
  MethodInfo::default_instance_ = new MethodInfo();
  FieldInfo::default_instance_ = new FieldInfo();
  ClassInfo::default_instance_ = new ClassInfo();
  MaxineInfoDB::default_instance_ = new MaxineInfoDB();
  AllocProf::default_instance_ = new AllocProf();
  CacheMissProf::default_instance_ = new CacheMissProf();
  CacheRWGroupInfo::default_instance_ = new CacheRWGroupInfo();
  CacheRWGroupMissProf::default_instance_ = new CacheRWGroupMissProf();
  AllocSiteProf::default_instance_ = new AllocSiteProf();
  FieldProf::default_instance_ = new FieldProf();
  ClassProf::default_instance_ = new ClassProf();
  ZSimProfDB::default_instance_ = new ZSimProfDB();
  MaxSimConfig::default_instance_->InitAsDefaultInstance();
  FieldOffsetRemapPair::default_instance_->InitAsDefaultInstance();
  DataTransInfo::default_instance_->InitAsDefaultInstance();
  DataTransDB::default_instance_->InitAsDefaultInstance();
  OffsetBCIPair::default_instance_->InitAsDefaultInstance();
  MethodInfo::default_instance_->InitAsDefaultInstance();
  FieldInfo::default_instance_->InitAsDefaultInstance();
  ClassInfo::default_instance_->InitAsDefaultInstance();
  MaxineInfoDB::default_instance_->InitAsDefaultInstance();
  AllocProf::default_instance_->InitAsDefaultInstance();
  CacheMissProf::default_instance_->InitAsDefaultInstance();
  CacheRWGroupInfo::default_instance_->InitAsDefaultInstance();
  CacheRWGroupMissProf::default_instance_->InitAsDefaultInstance();
  AllocSiteProf::default_instance_->InitAsDefaultInstance();
  FieldProf::default_instance_->InitAsDefaultInstance();
  ClassProf::default_instance_->InitAsDefaultInstance();
  ZSimProfDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MaxSimInterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MaxSimInterface_2eproto {
  StaticDescriptorInitializer_MaxSimInterface_2eproto() {
    protobuf_AddDesc_MaxSimInterface_2eproto();
  }
} static_descriptor_initializer_MaxSimInterface_2eproto_;
const ::google::protobuf::EnumDescriptor* PointerTaggingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointerTaggingType_descriptor_;
}
bool PointerTaggingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZSimMagicOpcodes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZSimMagicOpcodes_descriptor_;
}
bool ZSimMagicOpcodes_IsValid(int value) {
  switch(value) {
    case 1025:
    case 1026:
    case 1033:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaxSimMagicOpcodes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxSimMagicOpcodes_descriptor_;
}
bool MaxSimMagicOpcodes_IsValid(int value) {
  switch(value) {
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaxSimMagicOpPackedArgsOffsets_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxSimMagicOpPackedArgsOffsets_descriptor_;
}
bool MaxSimMagicOpPackedArgsOffsets_IsValid(int value) {
  switch(value) {
    case 0:
    case 32:
    case 48:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddressRangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressRangeType_descriptor_;
}
bool AddressRangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaxineVMOperationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxineVMOperationMode_descriptor_;
}
bool MaxineVMOperationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HubType_descriptor_;
}
bool HubType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PointerTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointerTag_descriptor_;
}
bool PointerTag_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 15:
    case 16:
    case 65534:
    case 65535:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MaxSimConfig::kIsMaxSimEnabledFieldNumber;
const int MaxSimConfig::kPointerTaggingTypeFieldNumber;
const int MaxSimConfig::kLayoutScaleFactorFieldNumber;
const int MaxSimConfig::kLayoutScaleRefFactorFieldNumber;
#endif  // !_MSC_VER

MaxSimConfig::MaxSimConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.MaxSimConfig)
}

void MaxSimConfig::InitAsDefaultInstance() {
}

MaxSimConfig::MaxSimConfig(const MaxSimConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.MaxSimConfig)
}

void MaxSimConfig::SharedCtor() {
  _cached_size_ = 0;
  ismaxsimenabled_ = true;
  pointertaggingtype_ = 1;
  layoutscalefactor_ = 1;
  layoutscalereffactor_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxSimConfig::~MaxSimConfig() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.MaxSimConfig)
  SharedDtor();
}

void MaxSimConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxSimConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxSimConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxSimConfig_descriptor_;
}

const MaxSimConfig& MaxSimConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

MaxSimConfig* MaxSimConfig::default_instance_ = NULL;

MaxSimConfig* MaxSimConfig::New() const {
  return new MaxSimConfig;
}

void MaxSimConfig::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    ismaxsimenabled_ = true;
    pointertaggingtype_ = 1;
    layoutscalefactor_ = 1;
    layoutscalereffactor_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxSimConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.MaxSimConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isMaxSimEnabled = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismaxsimenabled_)));
          set_has_ismaxsimenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pointerTaggingType;
        break;
      }

      // optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
      case 2: {
        if (tag == 16) {
         parse_pointerTaggingType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MaxSimInterface::PointerTaggingType_IsValid(value)) {
            set_pointertaggingtype(static_cast< ::MaxSimInterface::PointerTaggingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_layoutScaleFactor;
        break;
      }

      // optional int32 layoutScaleFactor = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_layoutScaleFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutscalefactor_)));
          set_has_layoutscalefactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_layoutScaleRefFactor;
        break;
      }

      // optional int32 layoutScaleRefFactor = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_layoutScaleRefFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutscalereffactor_)));
          set_has_layoutscalereffactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.MaxSimConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.MaxSimConfig)
  return false;
#undef DO_
}

void MaxSimConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.MaxSimConfig)
  // optional bool isMaxSimEnabled = 1 [default = true];
  if (has_ismaxsimenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismaxsimenabled(), output);
  }

  // optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
  if (has_pointertaggingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pointertaggingtype(), output);
  }

  // optional int32 layoutScaleFactor = 3 [default = 1];
  if (has_layoutscalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->layoutscalefactor(), output);
  }

  // optional int32 layoutScaleRefFactor = 4 [default = 1];
  if (has_layoutscalereffactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layoutscalereffactor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.MaxSimConfig)
}

::google::protobuf::uint8* MaxSimConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.MaxSimConfig)
  // optional bool isMaxSimEnabled = 1 [default = true];
  if (has_ismaxsimenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismaxsimenabled(), target);
  }

  // optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
  if (has_pointertaggingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pointertaggingtype(), target);
  }

  // optional int32 layoutScaleFactor = 3 [default = 1];
  if (has_layoutscalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->layoutscalefactor(), target);
  }

  // optional int32 layoutScaleRefFactor = 4 [default = 1];
  if (has_layoutscalereffactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layoutscalereffactor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.MaxSimConfig)
  return target;
}

int MaxSimConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isMaxSimEnabled = 1 [default = true];
    if (has_ismaxsimenabled()) {
      total_size += 1 + 1;
    }

    // optional .MaxSimInterface.PointerTaggingType pointerTaggingType = 2 [default = CLASS_ID_TAGGING];
    if (has_pointertaggingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pointertaggingtype());
    }

    // optional int32 layoutScaleFactor = 3 [default = 1];
    if (has_layoutscalefactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutscalefactor());
    }

    // optional int32 layoutScaleRefFactor = 4 [default = 1];
    if (has_layoutscalereffactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutscalereffactor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxSimConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxSimConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxSimConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxSimConfig::MergeFrom(const MaxSimConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismaxsimenabled()) {
      set_ismaxsimenabled(from.ismaxsimenabled());
    }
    if (from.has_pointertaggingtype()) {
      set_pointertaggingtype(from.pointertaggingtype());
    }
    if (from.has_layoutscalefactor()) {
      set_layoutscalefactor(from.layoutscalefactor());
    }
    if (from.has_layoutscalereffactor()) {
      set_layoutscalereffactor(from.layoutscalereffactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxSimConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxSimConfig::CopyFrom(const MaxSimConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxSimConfig::IsInitialized() const {

  return true;
}

void MaxSimConfig::Swap(MaxSimConfig* other) {
  if (other != this) {
    std::swap(ismaxsimenabled_, other->ismaxsimenabled_);
    std::swap(pointertaggingtype_, other->pointertaggingtype_);
    std::swap(layoutscalefactor_, other->layoutscalefactor_);
    std::swap(layoutscalereffactor_, other->layoutscalereffactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxSimConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxSimConfig_descriptor_;
  metadata.reflection = MaxSimConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldOffsetRemapPair::kFromOffsetFieldNumber;
const int FieldOffsetRemapPair::kToOffsetFieldNumber;
#endif  // !_MSC_VER

FieldOffsetRemapPair::FieldOffsetRemapPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.FieldOffsetRemapPair)
}

void FieldOffsetRemapPair::InitAsDefaultInstance() {
}

FieldOffsetRemapPair::FieldOffsetRemapPair(const FieldOffsetRemapPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.FieldOffsetRemapPair)
}

void FieldOffsetRemapPair::SharedCtor() {
  _cached_size_ = 0;
  fromoffset_ = 0;
  tooffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldOffsetRemapPair::~FieldOffsetRemapPair() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.FieldOffsetRemapPair)
  SharedDtor();
}

void FieldOffsetRemapPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldOffsetRemapPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldOffsetRemapPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldOffsetRemapPair_descriptor_;
}

const FieldOffsetRemapPair& FieldOffsetRemapPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

FieldOffsetRemapPair* FieldOffsetRemapPair::default_instance_ = NULL;

FieldOffsetRemapPair* FieldOffsetRemapPair::New() const {
  return new FieldOffsetRemapPair;
}

void FieldOffsetRemapPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FieldOffsetRemapPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fromoffset_, tooffset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldOffsetRemapPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.FieldOffsetRemapPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fromOffset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromoffset_)));
          set_has_fromoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_toOffset;
        break;
      }

      // required int32 toOffset = 2;
      case 2: {
        if (tag == 16) {
         parse_toOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tooffset_)));
          set_has_tooffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.FieldOffsetRemapPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.FieldOffsetRemapPair)
  return false;
#undef DO_
}

void FieldOffsetRemapPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.FieldOffsetRemapPair)
  // required int32 fromOffset = 1;
  if (has_fromoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromoffset(), output);
  }

  // required int32 toOffset = 2;
  if (has_tooffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tooffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.FieldOffsetRemapPair)
}

::google::protobuf::uint8* FieldOffsetRemapPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.FieldOffsetRemapPair)
  // required int32 fromOffset = 1;
  if (has_fromoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromoffset(), target);
  }

  // required int32 toOffset = 2;
  if (has_tooffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tooffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.FieldOffsetRemapPair)
  return target;
}

int FieldOffsetRemapPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fromOffset = 1;
    if (has_fromoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromoffset());
    }

    // required int32 toOffset = 2;
    if (has_tooffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tooffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldOffsetRemapPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldOffsetRemapPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldOffsetRemapPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldOffsetRemapPair::MergeFrom(const FieldOffsetRemapPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromoffset()) {
      set_fromoffset(from.fromoffset());
    }
    if (from.has_tooffset()) {
      set_tooffset(from.tooffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldOffsetRemapPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldOffsetRemapPair::CopyFrom(const FieldOffsetRemapPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldOffsetRemapPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FieldOffsetRemapPair::Swap(FieldOffsetRemapPair* other) {
  if (other != this) {
    std::swap(fromoffset_, other->fromoffset_);
    std::swap(tooffset_, other->tooffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldOffsetRemapPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldOffsetRemapPair_descriptor_;
  metadata.reflection = FieldOffsetRemapPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTransInfo::kTypeDescFieldNumber;
const int DataTransInfo::kTransTagFieldNumber;
const int DataTransInfo::kFieldOffsetRemapPairsFieldNumber;
#endif  // !_MSC_VER

DataTransInfo::DataTransInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.DataTransInfo)
}

void DataTransInfo::InitAsDefaultInstance() {
}

DataTransInfo::DataTransInfo(const DataTransInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.DataTransInfo)
}

void DataTransInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transtag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTransInfo::~DataTransInfo() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.DataTransInfo)
  SharedDtor();
}

void DataTransInfo::SharedDtor() {
  if (typedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typedesc_;
  }
  if (this != default_instance_) {
  }
}

void DataTransInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransInfo_descriptor_;
}

const DataTransInfo& DataTransInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

DataTransInfo* DataTransInfo::default_instance_ = NULL;

DataTransInfo* DataTransInfo::New() const {
  return new DataTransInfo;
}

void DataTransInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_typedesc()) {
      if (typedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typedesc_->clear();
      }
    }
    transtag_ = 0;
  }
  fieldoffsetremappairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTransInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.DataTransInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string typeDesc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typedesc().data(), this->typedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typedesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transTag;
        break;
      }

      // optional int32 transTag = 2;
      case 2: {
        if (tag == 16) {
         parse_transTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transtag_)));
          set_has_transtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fieldOffsetRemapPairs;
        break;
      }

      // repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
      case 3: {
        if (tag == 26) {
         parse_fieldOffsetRemapPairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldoffsetremappairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fieldOffsetRemapPairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.DataTransInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.DataTransInfo)
  return false;
#undef DO_
}

void DataTransInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.DataTransInfo)
  // required string typeDesc = 1;
  if (has_typedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typedesc().data(), this->typedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typedesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->typedesc(), output);
  }

  // optional int32 transTag = 2;
  if (has_transtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transtag(), output);
  }

  // repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
  for (int i = 0; i < this->fieldoffsetremappairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fieldoffsetremappairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.DataTransInfo)
}

::google::protobuf::uint8* DataTransInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.DataTransInfo)
  // required string typeDesc = 1;
  if (has_typedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typedesc().data(), this->typedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typedesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typedesc(), target);
  }

  // optional int32 transTag = 2;
  if (has_transtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transtag(), target);
  }

  // repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
  for (int i = 0; i < this->fieldoffsetremappairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fieldoffsetremappairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.DataTransInfo)
  return target;
}

int DataTransInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string typeDesc = 1;
    if (has_typedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typedesc());
    }

    // optional int32 transTag = 2;
    if (has_transtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transtag());
    }

  }
  // repeated .MaxSimInterface.FieldOffsetRemapPair fieldOffsetRemapPairs = 3;
  total_size += 1 * this->fieldoffsetremappairs_size();
  for (int i = 0; i < this->fieldoffsetremappairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldoffsetremappairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTransInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTransInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTransInfo::MergeFrom(const DataTransInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldoffsetremappairs_.MergeFrom(from.fieldoffsetremappairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typedesc()) {
      set_typedesc(from.typedesc());
    }
    if (from.has_transtag()) {
      set_transtag(from.transtag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTransInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransInfo::CopyFrom(const DataTransInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fieldoffsetremappairs())) return false;
  return true;
}

void DataTransInfo::Swap(DataTransInfo* other) {
  if (other != this) {
    std::swap(typedesc_, other->typedesc_);
    std::swap(transtag_, other->transtag_);
    fieldoffsetremappairs_.Swap(&other->fieldoffsetremappairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTransInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTransInfo_descriptor_;
  metadata.reflection = DataTransInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTransDB::kDataTransInfoFieldNumber;
#endif  // !_MSC_VER

DataTransDB::DataTransDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.DataTransDB)
}

void DataTransDB::InitAsDefaultInstance() {
}

DataTransDB::DataTransDB(const DataTransDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.DataTransDB)
}

void DataTransDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTransDB::~DataTransDB() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.DataTransDB)
  SharedDtor();
}

void DataTransDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTransDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransDB_descriptor_;
}

const DataTransDB& DataTransDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

DataTransDB* DataTransDB::default_instance_ = NULL;

DataTransDB* DataTransDB::New() const {
  return new DataTransDB;
}

void DataTransDB::Clear() {
  datatransinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTransDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.DataTransDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_dataTransInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datatransinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dataTransInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.DataTransDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.DataTransDB)
  return false;
#undef DO_
}

void DataTransDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.DataTransDB)
  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datatransinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.DataTransDB)
}

::google::protobuf::uint8* DataTransDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.DataTransDB)
  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datatransinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.DataTransDB)
  return target;
}

int DataTransDB::ByteSize() const {
  int total_size = 0;

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 1;
  total_size += 1 * this->datatransinfo_size();
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datatransinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTransDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTransDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTransDB::MergeFrom(const DataTransDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  datatransinfo_.MergeFrom(from.datatransinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTransDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransDB::CopyFrom(const DataTransDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransDB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datatransinfo())) return false;
  return true;
}

void DataTransDB::Swap(DataTransDB* other) {
  if (other != this) {
    datatransinfo_.Swap(&other->datatransinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTransDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTransDB_descriptor_;
  metadata.reflection = DataTransDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffsetBCIPair::kOffsetFieldNumber;
const int OffsetBCIPair::kBCIFieldNumber;
#endif  // !_MSC_VER

OffsetBCIPair::OffsetBCIPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.OffsetBCIPair)
}

void OffsetBCIPair::InitAsDefaultInstance() {
}

OffsetBCIPair::OffsetBCIPair(const OffsetBCIPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.OffsetBCIPair)
}

void OffsetBCIPair::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  bci_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffsetBCIPair::~OffsetBCIPair() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.OffsetBCIPair)
  SharedDtor();
}

void OffsetBCIPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffsetBCIPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffsetBCIPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetBCIPair_descriptor_;
}

const OffsetBCIPair& OffsetBCIPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

OffsetBCIPair* OffsetBCIPair::default_instance_ = NULL;

OffsetBCIPair* OffsetBCIPair::New() const {
  return new OffsetBCIPair;
}

void OffsetBCIPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OffsetBCIPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, bci_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffsetBCIPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.OffsetBCIPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BCI;
        break;
      }

      // required int32 BCI = 2;
      case 2: {
        if (tag == 16) {
         parse_BCI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bci_)));
          set_has_bci();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.OffsetBCIPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.OffsetBCIPair)
  return false;
#undef DO_
}

void OffsetBCIPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.OffsetBCIPair)
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 BCI = 2;
  if (has_bci()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bci(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.OffsetBCIPair)
}

::google::protobuf::uint8* OffsetBCIPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.OffsetBCIPair)
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 BCI = 2;
  if (has_bci()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bci(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.OffsetBCIPair)
  return target;
}

int OffsetBCIPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 BCI = 2;
    if (has_bci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bci());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffsetBCIPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffsetBCIPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffsetBCIPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffsetBCIPair::MergeFrom(const OffsetBCIPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_bci()) {
      set_bci(from.bci());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffsetBCIPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffsetBCIPair::CopyFrom(const OffsetBCIPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffsetBCIPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OffsetBCIPair::Swap(OffsetBCIPair* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(bci_, other->bci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffsetBCIPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffsetBCIPair_descriptor_;
  metadata.reflection = OffsetBCIPair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MethodInfo_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodInfo_Kind_descriptor_;
}
bool MethodInfo_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MethodInfo_Kind MethodInfo::OPTIMIZED;
const MethodInfo_Kind MethodInfo::BOOT;
const MethodInfo_Kind MethodInfo::BASELINE;
const MethodInfo_Kind MethodInfo::NATIVE;
const MethodInfo_Kind MethodInfo::Kind_MIN;
const MethodInfo_Kind MethodInfo::Kind_MAX;
const int MethodInfo::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MethodInfo::kNameFieldNumber;
const int MethodInfo::kBeginIPFieldNumber;
const int MethodInfo::kSizeFieldNumber;
const int MethodInfo::kDescFieldNumber;
const int MethodInfo::kClassIdFieldNumber;
const int MethodInfo::kKindFieldNumber;
const int MethodInfo::kOffsetBCIPairFieldNumber;
#endif  // !_MSC_VER

MethodInfo::MethodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.MethodInfo)
}

void MethodInfo::InitAsDefaultInstance() {
}

MethodInfo::MethodInfo(const MethodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.MethodInfo)
}

void MethodInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beginip_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodInfo::~MethodInfo() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.MethodInfo)
  SharedDtor();
}

void MethodInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void MethodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodInfo_descriptor_;
}

const MethodInfo& MethodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

MethodInfo* MethodInfo::default_instance_ = NULL;

MethodInfo* MethodInfo::New() const {
  return new MethodInfo;
}

void MethodInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MethodInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(beginip_, size_);
    ZR_(classid_, kind_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  offsetbcipair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.MethodInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beginIP;
        break;
      }

      // required int64 beginIP = 2;
      case 2: {
        if (tag == 16) {
         parse_beginIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beginip_)));
          set_has_beginip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_classId;
        break;
      }

      // optional int32 classId = 5;
      case 5: {
        if (tag == 40) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kind;
        break;
      }

      // optional .MaxSimInterface.MethodInfo.Kind kind = 6;
      case 6: {
        if (tag == 48) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MaxSimInterface::MethodInfo_Kind_IsValid(value)) {
            set_kind(static_cast< ::MaxSimInterface::MethodInfo_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_offsetBCIPair;
        break;
      }

      // repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
      case 7: {
        if (tag == 58) {
         parse_offsetBCIPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsetbcipair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_offsetBCIPair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.MethodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.MethodInfo)
  return false;
#undef DO_
}

void MethodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.MethodInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 beginIP = 2;
  if (has_beginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->beginip(), output);
  }

  // required int64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->size(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // optional int32 classId = 5;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->classid(), output);
  }

  // optional .MaxSimInterface.MethodInfo.Kind kind = 6;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->kind(), output);
  }

  // repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
  for (int i = 0; i < this->offsetbcipair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->offsetbcipair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.MethodInfo)
}

::google::protobuf::uint8* MethodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.MethodInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 beginIP = 2;
  if (has_beginip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->beginip(), target);
  }

  // required int64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->size(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional int32 classId = 5;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->classid(), target);
  }

  // optional .MaxSimInterface.MethodInfo.Kind kind = 6;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->kind(), target);
  }

  // repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
  for (int i = 0; i < this->offsetbcipair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->offsetbcipair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.MethodInfo)
  return target;
}

int MethodInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 beginIP = 2;
    if (has_beginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beginip());
    }

    // required int64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 classId = 5;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // optional .MaxSimInterface.MethodInfo.Kind kind = 6;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  // repeated .MaxSimInterface.OffsetBCIPair offsetBCIPair = 7;
  total_size += 1 * this->offsetbcipair_size();
  for (int i = 0; i < this->offsetbcipair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsetbcipair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MethodInfo::MergeFrom(const MethodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetbcipair_.MergeFrom(from.offsetbcipair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_beginip()) {
      set_beginip(from.beginip());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodInfo::CopyFrom(const MethodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->offsetbcipair())) return false;
  return true;
}

void MethodInfo::Swap(MethodInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(beginip_, other->beginip_);
    std::swap(size_, other->size_);
    std::swap(desc_, other->desc_);
    std::swap(classid_, other->classid_);
    std::swap(kind_, other->kind_);
    offsetbcipair_.Swap(&other->offsetbcipair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MethodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodInfo_descriptor_;
  metadata.reflection = MethodInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldInfo_Property_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldInfo_Property_descriptor_;
}
bool FieldInfo_Property_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldInfo_Property FieldInfo::FINAL;
const FieldInfo_Property FieldInfo::Property_MIN;
const FieldInfo_Property FieldInfo::Property_MAX;
const int FieldInfo::Property_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FieldInfo::kNameFieldNumber;
const int FieldInfo::kClassIdFieldNumber;
const int FieldInfo::kOffsetFieldNumber;
const int FieldInfo::kPropertyFieldNumber;
#endif  // !_MSC_VER

FieldInfo::FieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.FieldInfo)
}

void FieldInfo::InitAsDefaultInstance() {
}

FieldInfo::FieldInfo(const FieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.FieldInfo)
}

void FieldInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classid_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.FieldInfo)
  SharedDtor();
}

void FieldInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldInfo_descriptor_;
}

const FieldInfo& FieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

FieldInfo* FieldInfo::default_instance_ = NULL;

FieldInfo* FieldInfo::New() const {
  return new FieldInfo;
}

void FieldInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FieldInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(classid_, offset_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.FieldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_classId;
        break;
      }

      // required int32 classId = 2;
      case 2: {
        if (tag == 16) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_property;
        break;
      }

      // repeated .MaxSimInterface.FieldInfo.Property property = 4;
      case 4: {
        if (tag == 32) {
         parse_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MaxSimInterface::FieldInfo_Property_IsValid(value)) {
            add_property(static_cast< ::MaxSimInterface::FieldInfo_Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MaxSimInterface::FieldInfo_Property_IsValid,
                 this->mutable_property())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_property;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.FieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.FieldInfo)
  return false;
#undef DO_
}

void FieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.FieldInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 classId = 2;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->classid(), output);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // repeated .MaxSimInterface.FieldInfo.Property property = 4;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.FieldInfo)
}

::google::protobuf::uint8* FieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.FieldInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 classId = 2;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->classid(), target);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // repeated .MaxSimInterface.FieldInfo.Property property = 4;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.FieldInfo)
  return target;
}

int FieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 classId = 2;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .MaxSimInterface.FieldInfo.Property property = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->property_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->property(i));
    }
    total_size += 1 * this->property_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldInfo::MergeFrom(const FieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FieldInfo::Swap(FieldInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classid_, other->classid_);
    std::swap(offset_, other->offset_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldInfo_descriptor_;
  metadata.reflection = FieldInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClassInfo_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassInfo_Kind_descriptor_;
}
bool ClassInfo_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClassInfo_Kind ClassInfo::TUPLE;
const ClassInfo_Kind ClassInfo::ARRAY;
const ClassInfo_Kind ClassInfo::PRIMITIVE;
const ClassInfo_Kind ClassInfo::HYBRID;
const ClassInfo_Kind ClassInfo::OTHER;
const ClassInfo_Kind ClassInfo::Kind_MIN;
const ClassInfo_Kind ClassInfo::Kind_MAX;
const int ClassInfo::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClassInfo::kDescFieldNumber;
const int ClassInfo::kIdFieldNumber;
const int ClassInfo::kKindFieldNumber;
const int ClassInfo::kComponentIdFieldNumber;
const int ClassInfo::kFieldInfoFieldNumber;
#endif  // !_MSC_VER

ClassInfo::ClassInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.ClassInfo)
}

void ClassInfo::InitAsDefaultInstance() {
}

ClassInfo::ClassInfo(const ClassInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.ClassInfo)
}

void ClassInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  kind_ = 0;
  componentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassInfo::~ClassInfo() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.ClassInfo)
  SharedDtor();
}

void ClassInfo::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassInfo_descriptor_;
}

const ClassInfo& ClassInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

ClassInfo* ClassInfo::default_instance_ = NULL;

ClassInfo* ClassInfo::New() const {
  return new ClassInfo;
}

void ClassInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClassInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, kind_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    componentid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fieldinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.ClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .MaxSimInterface.ClassInfo.Kind kind = 3;
      case 3: {
        if (tag == 24) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MaxSimInterface::ClassInfo_Kind_IsValid(value)) {
            set_kind(static_cast< ::MaxSimInterface::ClassInfo_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_componentId;
        break;
      }

      // optional int32 componentId = 4;
      case 4: {
        if (tag == 32) {
         parse_componentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fieldInfo;
        break;
      }

      // repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_fieldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fieldInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.ClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.ClassInfo)
  return false;
#undef DO_
}

void ClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.ClassInfo)
  // required string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required .MaxSimInterface.ClassInfo.Kind kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  // optional int32 componentId = 4;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->componentid(), output);
  }

  // repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fieldinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.ClassInfo)
}

::google::protobuf::uint8* ClassInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.ClassInfo)
  // required string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required .MaxSimInterface.ClassInfo.Kind kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  // optional int32 componentId = 4;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->componentid(), target);
  }

  // repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fieldinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.ClassInfo)
  return target;
}

int ClassInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .MaxSimInterface.ClassInfo.Kind kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional int32 componentId = 4;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->componentid());
    }

  }
  // repeated .MaxSimInterface.FieldInfo fieldInfo = 5;
  total_size += 1 * this->fieldinfo_size();
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassInfo::MergeFrom(const ClassInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldinfo_.MergeFrom(from.fieldinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassInfo::CopyFrom(const ClassInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fieldinfo())) return false;
  return true;
}

void ClassInfo::Swap(ClassInfo* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(componentid_, other->componentid_);
    fieldinfo_.Swap(&other->fieldinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassInfo_descriptor_;
  metadata.reflection = ClassInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxineInfoDB::kKeyFieldNumber;
const int MaxineInfoDB::kMaxClassInfoIdFieldNumber;
const int MaxineInfoDB::kClassInfoFieldNumber;
const int MaxineInfoDB::kMethodInfoFieldNumber;
const int MaxineInfoDB::kBootCodeRegInfoFieldNumber;
const int MaxineInfoDB::kMaxSimConfigFieldNumber;
const int MaxineInfoDB::kNullCheckOffsetFieldNumber;
const int MaxineInfoDB::kDataTransInfoFieldNumber;
#endif  // !_MSC_VER

MaxineInfoDB::MaxineInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.MaxineInfoDB)
}

void MaxineInfoDB::InitAsDefaultInstance() {
  bootcodereginfo_ = const_cast< ::MaxSimInterface::MethodInfo*>(&::MaxSimInterface::MethodInfo::default_instance());
  maxsimconfig_ = const_cast< ::MaxSimInterface::MaxSimConfig*>(&::MaxSimInterface::MaxSimConfig::default_instance());
}

MaxineInfoDB::MaxineInfoDB(const MaxineInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.MaxineInfoDB)
}

void MaxineInfoDB::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  maxclassinfoid_ = 0;
  bootcodereginfo_ = NULL;
  maxsimconfig_ = NULL;
  nullcheckoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxineInfoDB::~MaxineInfoDB() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.MaxineInfoDB)
  SharedDtor();
}

void MaxineInfoDB::SharedDtor() {
  if (this != default_instance_) {
    delete bootcodereginfo_;
    delete maxsimconfig_;
  }
}

void MaxineInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxineInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxineInfoDB_descriptor_;
}

const MaxineInfoDB& MaxineInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

MaxineInfoDB* MaxineInfoDB::default_instance_ = NULL;

MaxineInfoDB* MaxineInfoDB::New() const {
  return new MaxineInfoDB;
}

void MaxineInfoDB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaxineInfoDB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 115) {
    ZR_(maxclassinfoid_, nullcheckoffset_);
    key_ = GOOGLE_LONGLONG(0);
    if (has_bootcodereginfo()) {
      if (bootcodereginfo_ != NULL) bootcodereginfo_->::MaxSimInterface::MethodInfo::Clear();
    }
    if (has_maxsimconfig()) {
      if (maxsimconfig_ != NULL) maxsimconfig_->::MaxSimInterface::MaxSimConfig::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  classinfo_.Clear();
  methodinfo_.Clear();
  datatransinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxineInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.MaxineInfoDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxClassInfoId;
        break;
      }

      // required int32 maxClassInfoId = 2;
      case 2: {
        if (tag == 16) {
         parse_maxClassInfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxclassinfoid_)));
          set_has_maxclassinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classInfo;
        break;
      }

      // repeated .MaxSimInterface.ClassInfo classInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_classInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classInfo;
        if (input->ExpectTag(34)) goto parse_methodInfo;
        break;
      }

      // repeated .MaxSimInterface.MethodInfo methodInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_methodInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_methodinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_methodInfo;
        if (input->ExpectTag(42)) goto parse_bootCodeRegInfo;
        break;
      }

      // required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_bootCodeRegInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootcodereginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MaxSimConfig;
        break;
      }

      // required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
      case 6: {
        if (tag == 50) {
         parse_MaxSimConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxsimconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nullCheckOffset;
        break;
      }

      // required int32 nullCheckOffset = 7;
      case 7: {
        if (tag == 56) {
         parse_nullCheckOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nullcheckoffset_)));
          set_has_nullcheckoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dataTransInfo;
        break;
      }

      // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_dataTransInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datatransinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dataTransInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.MaxineInfoDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.MaxineInfoDB)
  return false;
#undef DO_
}

void MaxineInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.MaxineInfoDB)
  // optional int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // required int32 maxClassInfoId = 2;
  if (has_maxclassinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxclassinfoid(), output);
  }

  // repeated .MaxSimInterface.ClassInfo classInfo = 3;
  for (int i = 0; i < this->classinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->classinfo(i), output);
  }

  // repeated .MaxSimInterface.MethodInfo methodInfo = 4;
  for (int i = 0; i < this->methodinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->methodinfo(i), output);
  }

  // required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
  if (has_bootcodereginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bootcodereginfo(), output);
  }

  // required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
  if (has_maxsimconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maxsimconfig(), output);
  }

  // required int32 nullCheckOffset = 7;
  if (has_nullcheckoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nullcheckoffset(), output);
  }

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->datatransinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.MaxineInfoDB)
}

::google::protobuf::uint8* MaxineInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.MaxineInfoDB)
  // optional int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // required int32 maxClassInfoId = 2;
  if (has_maxclassinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxclassinfoid(), target);
  }

  // repeated .MaxSimInterface.ClassInfo classInfo = 3;
  for (int i = 0; i < this->classinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->classinfo(i), target);
  }

  // repeated .MaxSimInterface.MethodInfo methodInfo = 4;
  for (int i = 0; i < this->methodinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->methodinfo(i), target);
  }

  // required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
  if (has_bootcodereginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bootcodereginfo(), target);
  }

  // required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
  if (has_maxsimconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->maxsimconfig(), target);
  }

  // required int32 nullCheckOffset = 7;
  if (has_nullcheckoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nullcheckoffset(), target);
  }

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->datatransinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.MaxineInfoDB)
  return target;
}

int MaxineInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // required int32 maxClassInfoId = 2;
    if (has_maxclassinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxclassinfoid());
    }

    // required .MaxSimInterface.MethodInfo bootCodeRegInfo = 5;
    if (has_bootcodereginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bootcodereginfo());
    }

    // required .MaxSimInterface.MaxSimConfig MaxSimConfig = 6;
    if (has_maxsimconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxsimconfig());
    }

    // required int32 nullCheckOffset = 7;
    if (has_nullcheckoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nullcheckoffset());
    }

  }
  // repeated .MaxSimInterface.ClassInfo classInfo = 3;
  total_size += 1 * this->classinfo_size();
  for (int i = 0; i < this->classinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classinfo(i));
  }

  // repeated .MaxSimInterface.MethodInfo methodInfo = 4;
  total_size += 1 * this->methodinfo_size();
  for (int i = 0; i < this->methodinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->methodinfo(i));
  }

  // repeated .MaxSimInterface.DataTransInfo dataTransInfo = 8;
  total_size += 1 * this->datatransinfo_size();
  for (int i = 0; i < this->datatransinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datatransinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxineInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxineInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxineInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxineInfoDB::MergeFrom(const MaxineInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  classinfo_.MergeFrom(from.classinfo_);
  methodinfo_.MergeFrom(from.methodinfo_);
  datatransinfo_.MergeFrom(from.datatransinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_maxclassinfoid()) {
      set_maxclassinfoid(from.maxclassinfoid());
    }
    if (from.has_bootcodereginfo()) {
      mutable_bootcodereginfo()->::MaxSimInterface::MethodInfo::MergeFrom(from.bootcodereginfo());
    }
    if (from.has_maxsimconfig()) {
      mutable_maxsimconfig()->::MaxSimInterface::MaxSimConfig::MergeFrom(from.maxsimconfig());
    }
    if (from.has_nullcheckoffset()) {
      set_nullcheckoffset(from.nullcheckoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxineInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxineInfoDB::CopyFrom(const MaxineInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxineInfoDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000072) != 0x00000072) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->classinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->methodinfo())) return false;
  if (has_bootcodereginfo()) {
    if (!this->bootcodereginfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->datatransinfo())) return false;
  return true;
}

void MaxineInfoDB::Swap(MaxineInfoDB* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(maxclassinfoid_, other->maxclassinfoid_);
    classinfo_.Swap(&other->classinfo_);
    methodinfo_.Swap(&other->methodinfo_);
    std::swap(bootcodereginfo_, other->bootcodereginfo_);
    std::swap(maxsimconfig_, other->maxsimconfig_);
    std::swap(nullcheckoffset_, other->nullcheckoffset_);
    datatransinfo_.Swap(&other->datatransinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxineInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxineInfoDB_descriptor_;
  metadata.reflection = MaxineInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocProf::kSizeFieldNumber;
const int AllocProf::kCountFieldNumber;
#endif  // !_MSC_VER

AllocProf::AllocProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.AllocProf)
}

void AllocProf::InitAsDefaultInstance() {
}

AllocProf::AllocProf(const AllocProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.AllocProf)
}

void AllocProf::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocProf::~AllocProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.AllocProf)
  SharedDtor();
}

void AllocProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocProf_descriptor_;
}

const AllocProf& AllocProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

AllocProf* AllocProf::default_instance_ = NULL;

AllocProf* AllocProf::New() const {
  return new AllocProf;
}

void AllocProf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllocProf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.AllocProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.AllocProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.AllocProf)
  return false;
#undef DO_
}

void AllocProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.AllocProf)
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // required int64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.AllocProf)
}

::google::protobuf::uint8* AllocProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.AllocProf)
  // required int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // required int64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.AllocProf)
  return target;
}

int AllocProf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocProf::MergeFrom(const AllocProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocProf::CopyFrom(const AllocProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocProf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllocProf::Swap(AllocProf* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocProf_descriptor_;
  metadata.reflection = AllocProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheMissProf::kCountFieldNumber;
const int CacheMissProf::kIPFieldNumber;
const int CacheMissProf::kClassIdFieldNumber;
const int CacheMissProf::kOffsetLoFieldNumber;
const int CacheMissProf::kOffsetHiFieldNumber;
#endif  // !_MSC_VER

CacheMissProf::CacheMissProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.CacheMissProf)
}

void CacheMissProf::InitAsDefaultInstance() {
}

CacheMissProf::CacheMissProf(const CacheMissProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.CacheMissProf)
}

void CacheMissProf::SharedCtor() {
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ip_ = GOOGLE_LONGLONG(0);
  classid_ = 0;
  offsetlo_ = 0;
  offsethi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheMissProf::~CacheMissProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.CacheMissProf)
  SharedDtor();
}

void CacheMissProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheMissProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheMissProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheMissProf_descriptor_;
}

const CacheMissProf& CacheMissProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

CacheMissProf* CacheMissProf::default_instance_ = NULL;

CacheMissProf* CacheMissProf::New() const {
  return new CacheMissProf;
}

void CacheMissProf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CacheMissProf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(count_, offsethi_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheMissProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.CacheMissProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IP;
        break;
      }

      // required int64 IP = 2;
      case 2: {
        if (tag == 16) {
         parse_IP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_classId;
        break;
      }

      // required int32 classId = 3;
      case 3: {
        if (tag == 24) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offsetLo;
        break;
      }

      // required int32 offsetLo = 4;
      case 4: {
        if (tag == 32) {
         parse_offsetLo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetlo_)));
          set_has_offsetlo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offsetHi;
        break;
      }

      // required int32 offsetHi = 5;
      case 5: {
        if (tag == 40) {
         parse_offsetHi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsethi_)));
          set_has_offsethi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.CacheMissProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.CacheMissProf)
  return false;
#undef DO_
}

void CacheMissProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.CacheMissProf)
  // required int64 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // required int64 IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ip(), output);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->classid(), output);
  }

  // required int32 offsetLo = 4;
  if (has_offsetlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offsetlo(), output);
  }

  // required int32 offsetHi = 5;
  if (has_offsethi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offsethi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.CacheMissProf)
}

::google::protobuf::uint8* CacheMissProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.CacheMissProf)
  // required int64 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // required int64 IP = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ip(), target);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->classid(), target);
  }

  // required int32 offsetLo = 4;
  if (has_offsetlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offsetlo(), target);
  }

  // required int32 offsetHi = 5;
  if (has_offsethi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->offsethi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.CacheMissProf)
  return target;
}

int CacheMissProf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // required int64 IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ip());
    }

    // required int32 classId = 3;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // required int32 offsetLo = 4;
    if (has_offsetlo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsetlo());
    }

    // required int32 offsetHi = 5;
    if (has_offsethi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsethi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheMissProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheMissProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheMissProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheMissProf::MergeFrom(const CacheMissProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_offsetlo()) {
      set_offsetlo(from.offsetlo());
    }
    if (from.has_offsethi()) {
      set_offsethi(from.offsethi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheMissProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheMissProf::CopyFrom(const CacheMissProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheMissProf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CacheMissProf::Swap(CacheMissProf* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(ip_, other->ip_);
    std::swap(classid_, other->classid_);
    std::swap(offsetlo_, other->offsetlo_);
    std::swap(offsethi_, other->offsethi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheMissProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheMissProf_descriptor_;
  metadata.reflection = CacheMissProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheRWGroupInfo::kCacheRWGroupIdFieldNumber;
const int CacheRWGroupInfo::kCacheGroupIdFieldNumber;
const int CacheRWGroupInfo::kCacheGroupNameFieldNumber;
const int CacheRWGroupInfo::kIsWriteFieldNumber;
#endif  // !_MSC_VER

CacheRWGroupInfo::CacheRWGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.CacheRWGroupInfo)
}

void CacheRWGroupInfo::InitAsDefaultInstance() {
}

CacheRWGroupInfo::CacheRWGroupInfo(const CacheRWGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.CacheRWGroupInfo)
}

void CacheRWGroupInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cacherwgroupid_ = 0;
  cachegroupid_ = 0;
  cachegroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iswrite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheRWGroupInfo::~CacheRWGroupInfo() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.CacheRWGroupInfo)
  SharedDtor();
}

void CacheRWGroupInfo::SharedDtor() {
  if (cachegroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cachegroupname_;
  }
  if (this != default_instance_) {
  }
}

void CacheRWGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheRWGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheRWGroupInfo_descriptor_;
}

const CacheRWGroupInfo& CacheRWGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

CacheRWGroupInfo* CacheRWGroupInfo::default_instance_ = NULL;

CacheRWGroupInfo* CacheRWGroupInfo::New() const {
  return new CacheRWGroupInfo;
}

void CacheRWGroupInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CacheRWGroupInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(cacherwgroupid_, cachegroupid_);
    if (has_cachegroupname()) {
      if (cachegroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cachegroupname_->clear();
      }
    }
    iswrite_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheRWGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.CacheRWGroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cacheRWGroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cacherwgroupid_)));
          set_has_cacherwgroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cacheGroupId;
        break;
      }

      // required int32 cacheGroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_cacheGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cachegroupid_)));
          set_has_cachegroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cacheGroupName;
        break;
      }

      // required string cacheGroupName = 3;
      case 3: {
        if (tag == 26) {
         parse_cacheGroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cachegroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cachegroupname().data(), this->cachegroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cachegroupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isWrite;
        break;
      }

      // required bool isWrite = 4;
      case 4: {
        if (tag == 32) {
         parse_isWrite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswrite_)));
          set_has_iswrite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.CacheRWGroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.CacheRWGroupInfo)
  return false;
#undef DO_
}

void CacheRWGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.CacheRWGroupInfo)
  // required int32 cacheRWGroupId = 1;
  if (has_cacherwgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cacherwgroupid(), output);
  }

  // required int32 cacheGroupId = 2;
  if (has_cachegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cachegroupid(), output);
  }

  // required string cacheGroupName = 3;
  if (has_cachegroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cachegroupname().data(), this->cachegroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cachegroupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cachegroupname(), output);
  }

  // required bool isWrite = 4;
  if (has_iswrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iswrite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.CacheRWGroupInfo)
}

::google::protobuf::uint8* CacheRWGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.CacheRWGroupInfo)
  // required int32 cacheRWGroupId = 1;
  if (has_cacherwgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cacherwgroupid(), target);
  }

  // required int32 cacheGroupId = 2;
  if (has_cachegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cachegroupid(), target);
  }

  // required string cacheGroupName = 3;
  if (has_cachegroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cachegroupname().data(), this->cachegroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cachegroupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cachegroupname(), target);
  }

  // required bool isWrite = 4;
  if (has_iswrite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iswrite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.CacheRWGroupInfo)
  return target;
}

int CacheRWGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cacheRWGroupId = 1;
    if (has_cacherwgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cacherwgroupid());
    }

    // required int32 cacheGroupId = 2;
    if (has_cachegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cachegroupid());
    }

    // required string cacheGroupName = 3;
    if (has_cachegroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cachegroupname());
    }

    // required bool isWrite = 4;
    if (has_iswrite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheRWGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheRWGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheRWGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheRWGroupInfo::MergeFrom(const CacheRWGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cacherwgroupid()) {
      set_cacherwgroupid(from.cacherwgroupid());
    }
    if (from.has_cachegroupid()) {
      set_cachegroupid(from.cachegroupid());
    }
    if (from.has_cachegroupname()) {
      set_cachegroupname(from.cachegroupname());
    }
    if (from.has_iswrite()) {
      set_iswrite(from.iswrite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheRWGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheRWGroupInfo::CopyFrom(const CacheRWGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRWGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CacheRWGroupInfo::Swap(CacheRWGroupInfo* other) {
  if (other != this) {
    std::swap(cacherwgroupid_, other->cacherwgroupid_);
    std::swap(cachegroupid_, other->cachegroupid_);
    std::swap(cachegroupname_, other->cachegroupname_);
    std::swap(iswrite_, other->iswrite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheRWGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheRWGroupInfo_descriptor_;
  metadata.reflection = CacheRWGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheRWGroupMissProf::kCacheMissProfFieldNumber;
#endif  // !_MSC_VER

CacheRWGroupMissProf::CacheRWGroupMissProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.CacheRWGroupMissProf)
}

void CacheRWGroupMissProf::InitAsDefaultInstance() {
}

CacheRWGroupMissProf::CacheRWGroupMissProf(const CacheRWGroupMissProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.CacheRWGroupMissProf)
}

void CacheRWGroupMissProf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheRWGroupMissProf::~CacheRWGroupMissProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.CacheRWGroupMissProf)
  SharedDtor();
}

void CacheRWGroupMissProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheRWGroupMissProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheRWGroupMissProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheRWGroupMissProf_descriptor_;
}

const CacheRWGroupMissProf& CacheRWGroupMissProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

CacheRWGroupMissProf* CacheRWGroupMissProf::default_instance_ = NULL;

CacheRWGroupMissProf* CacheRWGroupMissProf::New() const {
  return new CacheRWGroupMissProf;
}

void CacheRWGroupMissProf::Clear() {
  cachemissprof_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheRWGroupMissProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.CacheRWGroupMissProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
      case 1: {
        if (tag == 10) {
         parse_cacheMissProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cachemissprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cacheMissProf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.CacheRWGroupMissProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.CacheRWGroupMissProf)
  return false;
#undef DO_
}

void CacheRWGroupMissProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.CacheRWGroupMissProf)
  // repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
  for (int i = 0; i < this->cachemissprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cachemissprof(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.CacheRWGroupMissProf)
}

::google::protobuf::uint8* CacheRWGroupMissProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.CacheRWGroupMissProf)
  // repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
  for (int i = 0; i < this->cachemissprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cachemissprof(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.CacheRWGroupMissProf)
  return target;
}

int CacheRWGroupMissProf::ByteSize() const {
  int total_size = 0;

  // repeated .MaxSimInterface.CacheMissProf cacheMissProf = 1;
  total_size += 1 * this->cachemissprof_size();
  for (int i = 0; i < this->cachemissprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cachemissprof(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheRWGroupMissProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheRWGroupMissProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheRWGroupMissProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheRWGroupMissProf::MergeFrom(const CacheRWGroupMissProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  cachemissprof_.MergeFrom(from.cachemissprof_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheRWGroupMissProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheRWGroupMissProf::CopyFrom(const CacheRWGroupMissProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRWGroupMissProf::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cachemissprof())) return false;
  return true;
}

void CacheRWGroupMissProf::Swap(CacheRWGroupMissProf* other) {
  if (other != this) {
    cachemissprof_.Swap(&other->cachemissprof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheRWGroupMissProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheRWGroupMissProf_descriptor_;
  metadata.reflection = CacheRWGroupMissProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocSiteProf::kIdFieldNumber;
const int AllocSiteProf::kIPFieldNumber;
const int AllocSiteProf::kClassIdFieldNumber;
const int AllocSiteProf::kCountFieldNumber;
#endif  // !_MSC_VER

AllocSiteProf::AllocSiteProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.AllocSiteProf)
}

void AllocSiteProf::InitAsDefaultInstance() {
}

AllocSiteProf::AllocSiteProf(const AllocSiteProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.AllocSiteProf)
}

void AllocSiteProf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = GOOGLE_LONGLONG(0);
  classid_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocSiteProf::~AllocSiteProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.AllocSiteProf)
  SharedDtor();
}

void AllocSiteProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocSiteProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocSiteProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocSiteProf_descriptor_;
}

const AllocSiteProf& AllocSiteProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

AllocSiteProf* AllocSiteProf::default_instance_ = NULL;

AllocSiteProf* AllocSiteProf::New() const {
  return new AllocSiteProf;
}

void AllocSiteProf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllocSiteProf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocSiteProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.AllocSiteProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IP;
        break;
      }

      // required int64 IP = 2;
      case 2: {
        if (tag == 16) {
         parse_IP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_classId;
        break;
      }

      // required int32 classId = 3;
      case 3: {
        if (tag == 24) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int64 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.AllocSiteProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.AllocSiteProf)
  return false;
#undef DO_
}

void AllocSiteProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.AllocSiteProf)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ip(), output);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->classid(), output);
  }

  // required int64 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.AllocSiteProf)
}

::google::protobuf::uint8* AllocSiteProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.AllocSiteProf)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 IP = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ip(), target);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->classid(), target);
  }

  // required int64 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.AllocSiteProf)
  return target;
}

int AllocSiteProf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ip());
    }

    // required int32 classId = 3;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // required int64 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocSiteProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocSiteProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocSiteProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocSiteProf::MergeFrom(const AllocSiteProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocSiteProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocSiteProf::CopyFrom(const AllocSiteProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocSiteProf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AllocSiteProf::Swap(AllocSiteProf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(classid_, other->classid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocSiteProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocSiteProf_descriptor_;
  metadata.reflection = AllocSiteProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldProf::kOffsetFieldNumber;
const int FieldProf::kReadCountFieldNumber;
const int FieldProf::kWriteCountFieldNumber;
const int FieldProf::kCacheRWGroupMissCountFieldNumber;
#endif  // !_MSC_VER

FieldProf::FieldProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.FieldProf)
}

void FieldProf::InitAsDefaultInstance() {
}

FieldProf::FieldProf(const FieldProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.FieldProf)
}

void FieldProf::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  readcount_ = GOOGLE_LONGLONG(0);
  writecount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldProf::~FieldProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.FieldProf)
  SharedDtor();
}

void FieldProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldProf_descriptor_;
}

const FieldProf& FieldProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

FieldProf* FieldProf::default_instance_ = NULL;

FieldProf* FieldProf::New() const {
  return new FieldProf;
}

void FieldProf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FieldProf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(readcount_, writecount_);
    offset_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cacherwgroupmisscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.FieldProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_readCount;
        break;
      }

      // required int64 readCount = 2;
      case 2: {
        if (tag == 16) {
         parse_readCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &readcount_)));
          set_has_readcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_writeCount;
        break;
      }

      // required int64 writeCount = 3;
      case 3: {
        if (tag == 24) {
         parse_writeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &writecount_)));
          set_has_writecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cacheRWGroupMissCount;
        break;
      }

      // repeated int64 cacheRWGroupMissCount = 4;
      case 4: {
        if (tag == 32) {
         parse_cacheRWGroupMissCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_cacherwgroupmisscount())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cacherwgroupmisscount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cacheRWGroupMissCount;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.FieldProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.FieldProf)
  return false;
#undef DO_
}

void FieldProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.FieldProf)
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int64 readCount = 2;
  if (has_readcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->readcount(), output);
  }

  // required int64 writeCount = 3;
  if (has_writecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->writecount(), output);
  }

  // repeated int64 cacheRWGroupMissCount = 4;
  for (int i = 0; i < this->cacherwgroupmisscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->cacherwgroupmisscount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.FieldProf)
}

::google::protobuf::uint8* FieldProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.FieldProf)
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int64 readCount = 2;
  if (has_readcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->readcount(), target);
  }

  // required int64 writeCount = 3;
  if (has_writecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->writecount(), target);
  }

  // repeated int64 cacheRWGroupMissCount = 4;
  for (int i = 0; i < this->cacherwgroupmisscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->cacherwgroupmisscount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.FieldProf)
  return target;
}

int FieldProf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int64 readCount = 2;
    if (has_readcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->readcount());
    }

    // required int64 writeCount = 3;
    if (has_writecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->writecount());
    }

  }
  // repeated int64 cacheRWGroupMissCount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cacherwgroupmisscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cacherwgroupmisscount(i));
    }
    total_size += 1 * this->cacherwgroupmisscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldProf::MergeFrom(const FieldProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  cacherwgroupmisscount_.MergeFrom(from.cacherwgroupmisscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_readcount()) {
      set_readcount(from.readcount());
    }
    if (from.has_writecount()) {
      set_writecount(from.writecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldProf::CopyFrom(const FieldProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldProf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FieldProf::Swap(FieldProf* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(readcount_, other->readcount_);
    std::swap(writecount_, other->writecount_);
    cacherwgroupmisscount_.Swap(&other->cacherwgroupmisscount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldProf_descriptor_;
  metadata.reflection = FieldProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassProf::kIdFieldNumber;
const int ClassProf::kAllocProfFieldNumber;
const int ClassProf::kFieldProfFieldNumber;
const int ClassProf::kMemAllSizeFieldNumber;
const int ClassProf::kMemAllCountFieldNumber;
const int ClassProf::kMemAccCountFieldNumber;
#endif  // !_MSC_VER

ClassProf::ClassProf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.ClassProf)
}

void ClassProf::InitAsDefaultInstance() {
}

ClassProf::ClassProf(const ClassProf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.ClassProf)
}

void ClassProf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  memallsize_ = GOOGLE_LONGLONG(0);
  memallcount_ = GOOGLE_LONGLONG(0);
  memacccount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassProf::~ClassProf() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.ClassProf)
  SharedDtor();
}

void ClassProf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassProf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassProf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassProf_descriptor_;
}

const ClassProf& ClassProf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

ClassProf* ClassProf::default_instance_ = NULL;

ClassProf* ClassProf::New() const {
  return new ClassProf;
}

void ClassProf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClassProf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(memallsize_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  allocprof_.Clear();
  fieldprof_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassProf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.ClassProf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allocProf;
        break;
      }

      // repeated .MaxSimInterface.AllocProf allocProf = 2;
      case 2: {
        if (tag == 18) {
         parse_allocProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allocProf;
        if (input->ExpectTag(26)) goto parse_fieldProf;
        break;
      }

      // repeated .MaxSimInterface.FieldProf fieldProf = 3;
      case 3: {
        if (tag == 26) {
         parse_fieldProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fieldProf;
        if (input->ExpectTag(32)) goto parse_memAllSize;
        break;
      }

      // required int64 memAllSize = 4;
      case 4: {
        if (tag == 32) {
         parse_memAllSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memallsize_)));
          set_has_memallsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_memAllCount;
        break;
      }

      // required int64 memAllCount = 5;
      case 5: {
        if (tag == 40) {
         parse_memAllCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memallcount_)));
          set_has_memallcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memAccCount;
        break;
      }

      // required int64 memAccCount = 6;
      case 6: {
        if (tag == 48) {
         parse_memAccCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memacccount_)));
          set_has_memacccount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.ClassProf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.ClassProf)
  return false;
#undef DO_
}

void ClassProf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.ClassProf)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .MaxSimInterface.AllocProf allocProf = 2;
  for (int i = 0; i < this->allocprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allocprof(i), output);
  }

  // repeated .MaxSimInterface.FieldProf fieldProf = 3;
  for (int i = 0; i < this->fieldprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fieldprof(i), output);
  }

  // required int64 memAllSize = 4;
  if (has_memallsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->memallsize(), output);
  }

  // required int64 memAllCount = 5;
  if (has_memallcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->memallcount(), output);
  }

  // required int64 memAccCount = 6;
  if (has_memacccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->memacccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.ClassProf)
}

::google::protobuf::uint8* ClassProf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.ClassProf)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .MaxSimInterface.AllocProf allocProf = 2;
  for (int i = 0; i < this->allocprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allocprof(i), target);
  }

  // repeated .MaxSimInterface.FieldProf fieldProf = 3;
  for (int i = 0; i < this->fieldprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fieldprof(i), target);
  }

  // required int64 memAllSize = 4;
  if (has_memallsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->memallsize(), target);
  }

  // required int64 memAllCount = 5;
  if (has_memallcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->memallcount(), target);
  }

  // required int64 memAccCount = 6;
  if (has_memacccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->memacccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.ClassProf)
  return target;
}

int ClassProf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 memAllSize = 4;
    if (has_memallsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memallsize());
    }

    // required int64 memAllCount = 5;
    if (has_memallcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memallcount());
    }

    // required int64 memAccCount = 6;
    if (has_memacccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memacccount());
    }

  }
  // repeated .MaxSimInterface.AllocProf allocProf = 2;
  total_size += 1 * this->allocprof_size();
  for (int i = 0; i < this->allocprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocprof(i));
  }

  // repeated .MaxSimInterface.FieldProf fieldProf = 3;
  total_size += 1 * this->fieldprof_size();
  for (int i = 0; i < this->fieldprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldprof(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassProf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassProf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassProf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassProf::MergeFrom(const ClassProf& from) {
  GOOGLE_CHECK_NE(&from, this);
  allocprof_.MergeFrom(from.allocprof_);
  fieldprof_.MergeFrom(from.fieldprof_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_memallsize()) {
      set_memallsize(from.memallsize());
    }
    if (from.has_memallcount()) {
      set_memallcount(from.memallcount());
    }
    if (from.has_memacccount()) {
      set_memacccount(from.memacccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassProf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassProf::CopyFrom(const ClassProf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassProf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->allocprof())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldprof())) return false;
  return true;
}

void ClassProf::Swap(ClassProf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    allocprof_.Swap(&other->allocprof_);
    fieldprof_.Swap(&other->fieldprof_);
    std::swap(memallsize_, other->memallsize_);
    std::swap(memallcount_, other->memallcount_);
    std::swap(memacccount_, other->memacccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassProf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassProf_descriptor_;
  metadata.reflection = ClassProf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZSimProfDB::kMaxAllocSiteProfIdFieldNumber;
const int ZSimProfDB::kDumpEventualStatsBegFieldNumber;
const int ZSimProfDB::kDumpEventualStatsEndFieldNumber;
const int ZSimProfDB::kCacheRWGroupInfoFieldNumber;
const int ZSimProfDB::kClassProfFieldNumber;
const int ZSimProfDB::kCacheRWGroupMissProfFieldNumber;
const int ZSimProfDB::kAllocSiteProfFieldNumber;
#endif  // !_MSC_VER

ZSimProfDB::ZSimProfDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxSimInterface.ZSimProfDB)
}

void ZSimProfDB::InitAsDefaultInstance() {
}

ZSimProfDB::ZSimProfDB(const ZSimProfDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxSimInterface.ZSimProfDB)
}

void ZSimProfDB::SharedCtor() {
  _cached_size_ = 0;
  maxallocsiteprofid_ = 0;
  dumpeventualstatsbeg_ = 0;
  dumpeventualstatsend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZSimProfDB::~ZSimProfDB() {
  // @@protoc_insertion_point(destructor:MaxSimInterface.ZSimProfDB)
  SharedDtor();
}

void ZSimProfDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZSimProfDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZSimProfDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZSimProfDB_descriptor_;
}

const ZSimProfDB& ZSimProfDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaxSimInterface_2eproto();
  return *default_instance_;
}

ZSimProfDB* ZSimProfDB::default_instance_ = NULL;

ZSimProfDB* ZSimProfDB::New() const {
  return new ZSimProfDB;
}

void ZSimProfDB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZSimProfDB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(maxallocsiteprofid_, dumpeventualstatsbeg_);
    dumpeventualstatsend_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cacherwgroupinfo_.Clear();
  classprof_.Clear();
  cacherwgroupmissprof_.Clear();
  allocsiteprof_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZSimProfDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxSimInterface.ZSimProfDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxAllocSiteProfId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxallocsiteprofid_)));
          set_has_maxallocsiteprofid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dumpEventualStatsBeg;
        break;
      }

      // required int32 dumpEventualStatsBeg = 2;
      case 2: {
        if (tag == 16) {
         parse_dumpEventualStatsBeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dumpeventualstatsbeg_)));
          set_has_dumpeventualstatsbeg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dumpEventualStatsEnd;
        break;
      }

      // required int32 dumpEventualStatsEnd = 3;
      case 3: {
        if (tag == 24) {
         parse_dumpEventualStatsEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dumpeventualstatsend_)));
          set_has_dumpeventualstatsend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cacheRWGroupInfo;
        break;
      }

      // repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_cacheRWGroupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cacherwgroupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cacheRWGroupInfo;
        if (input->ExpectTag(42)) goto parse_classProf;
        break;
      }

      // repeated .MaxSimInterface.ClassProf classProf = 5;
      case 5: {
        if (tag == 42) {
         parse_classProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_classProf;
        if (input->ExpectTag(50)) goto parse_cacheRWGroupMissProf;
        break;
      }

      // repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
      case 6: {
        if (tag == 50) {
         parse_cacheRWGroupMissProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cacherwgroupmissprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cacheRWGroupMissProf;
        if (input->ExpectTag(58)) goto parse_allocSiteProf;
        break;
      }

      // repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
      case 7: {
        if (tag == 58) {
         parse_allocSiteProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocsiteprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_allocSiteProf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxSimInterface.ZSimProfDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxSimInterface.ZSimProfDB)
  return false;
#undef DO_
}

void ZSimProfDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxSimInterface.ZSimProfDB)
  // required int32 maxAllocSiteProfId = 1;
  if (has_maxallocsiteprofid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxallocsiteprofid(), output);
  }

  // required int32 dumpEventualStatsBeg = 2;
  if (has_dumpeventualstatsbeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dumpeventualstatsbeg(), output);
  }

  // required int32 dumpEventualStatsEnd = 3;
  if (has_dumpeventualstatsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dumpeventualstatsend(), output);
  }

  // repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
  for (int i = 0; i < this->cacherwgroupinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cacherwgroupinfo(i), output);
  }

  // repeated .MaxSimInterface.ClassProf classProf = 5;
  for (int i = 0; i < this->classprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->classprof(i), output);
  }

  // repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
  for (int i = 0; i < this->cacherwgroupmissprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cacherwgroupmissprof(i), output);
  }

  // repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
  for (int i = 0; i < this->allocsiteprof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->allocsiteprof(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxSimInterface.ZSimProfDB)
}

::google::protobuf::uint8* ZSimProfDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxSimInterface.ZSimProfDB)
  // required int32 maxAllocSiteProfId = 1;
  if (has_maxallocsiteprofid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxallocsiteprofid(), target);
  }

  // required int32 dumpEventualStatsBeg = 2;
  if (has_dumpeventualstatsbeg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dumpeventualstatsbeg(), target);
  }

  // required int32 dumpEventualStatsEnd = 3;
  if (has_dumpeventualstatsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dumpeventualstatsend(), target);
  }

  // repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
  for (int i = 0; i < this->cacherwgroupinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cacherwgroupinfo(i), target);
  }

  // repeated .MaxSimInterface.ClassProf classProf = 5;
  for (int i = 0; i < this->classprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->classprof(i), target);
  }

  // repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
  for (int i = 0; i < this->cacherwgroupmissprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cacherwgroupmissprof(i), target);
  }

  // repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
  for (int i = 0; i < this->allocsiteprof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->allocsiteprof(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxSimInterface.ZSimProfDB)
  return target;
}

int ZSimProfDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maxAllocSiteProfId = 1;
    if (has_maxallocsiteprofid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxallocsiteprofid());
    }

    // required int32 dumpEventualStatsBeg = 2;
    if (has_dumpeventualstatsbeg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dumpeventualstatsbeg());
    }

    // required int32 dumpEventualStatsEnd = 3;
    if (has_dumpeventualstatsend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dumpeventualstatsend());
    }

  }
  // repeated .MaxSimInterface.CacheRWGroupInfo cacheRWGroupInfo = 4;
  total_size += 1 * this->cacherwgroupinfo_size();
  for (int i = 0; i < this->cacherwgroupinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cacherwgroupinfo(i));
  }

  // repeated .MaxSimInterface.ClassProf classProf = 5;
  total_size += 1 * this->classprof_size();
  for (int i = 0; i < this->classprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classprof(i));
  }

  // repeated .MaxSimInterface.CacheRWGroupMissProf cacheRWGroupMissProf = 6;
  total_size += 1 * this->cacherwgroupmissprof_size();
  for (int i = 0; i < this->cacherwgroupmissprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cacherwgroupmissprof(i));
  }

  // repeated .MaxSimInterface.AllocSiteProf allocSiteProf = 7;
  total_size += 1 * this->allocsiteprof_size();
  for (int i = 0; i < this->allocsiteprof_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocsiteprof(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZSimProfDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZSimProfDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZSimProfDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZSimProfDB::MergeFrom(const ZSimProfDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  cacherwgroupinfo_.MergeFrom(from.cacherwgroupinfo_);
  classprof_.MergeFrom(from.classprof_);
  cacherwgroupmissprof_.MergeFrom(from.cacherwgroupmissprof_);
  allocsiteprof_.MergeFrom(from.allocsiteprof_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxallocsiteprofid()) {
      set_maxallocsiteprofid(from.maxallocsiteprofid());
    }
    if (from.has_dumpeventualstatsbeg()) {
      set_dumpeventualstatsbeg(from.dumpeventualstatsbeg());
    }
    if (from.has_dumpeventualstatsend()) {
      set_dumpeventualstatsend(from.dumpeventualstatsend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZSimProfDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZSimProfDB::CopyFrom(const ZSimProfDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZSimProfDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cacherwgroupinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->classprof())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cacherwgroupmissprof())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->allocsiteprof())) return false;
  return true;
}

void ZSimProfDB::Swap(ZSimProfDB* other) {
  if (other != this) {
    std::swap(maxallocsiteprofid_, other->maxallocsiteprofid_);
    std::swap(dumpeventualstatsbeg_, other->dumpeventualstatsbeg_);
    std::swap(dumpeventualstatsend_, other->dumpeventualstatsend_);
    cacherwgroupinfo_.Swap(&other->cacherwgroupinfo_);
    classprof_.Swap(&other->classprof_);
    cacherwgroupmissprof_.Swap(&other->cacherwgroupmissprof_);
    allocsiteprof_.Swap(&other->allocsiteprof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZSimProfDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZSimProfDB_descriptor_;
  metadata.reflection = ZSimProfDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxSimInterface

// @@protoc_insertion_point(global_scope)
